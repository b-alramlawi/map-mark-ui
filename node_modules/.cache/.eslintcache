[{"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\index.js":"1","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\App.js":"2","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\components\\Navbar.js":"3","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\HomePage.js":"4","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\ProfilePage.js":"5","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\VerificationFailedPage.js":"6","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\ForgotPasswordPage.js":"7","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\SignUpPage.js":"8","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\LoginPage.js":"9","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\ResetPasswordPage.js":"10","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\VerificationSuccessPage.js":"11","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\components\\SuccessMessage.js":"12","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\components\\FailedMessage.js":"13","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\NotFoundPage.js":"14","C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\components\\GoogleMap.js":"15"},{"size":275,"mtime":1696680376150,"results":"16","hashOfConfig":"17"},{"size":1914,"mtime":1696507857396,"results":"18","hashOfConfig":"17"},{"size":2037,"mtime":1696681380147,"results":"19","hashOfConfig":"17"},{"size":446,"mtime":1696680376205,"results":"20","hashOfConfig":"17"},{"size":5113,"mtime":1696681568551,"results":"21","hashOfConfig":"17"},{"size":659,"mtime":1696450966345,"results":"22","hashOfConfig":"17"},{"size":3010,"mtime":1696418378772,"results":"23","hashOfConfig":"17"},{"size":4538,"mtime":1696680376180,"results":"24","hashOfConfig":"17"},{"size":4072,"mtime":1696508840880,"results":"25","hashOfConfig":"17"},{"size":3482,"mtime":1696421157208,"results":"26","hashOfConfig":"17"},{"size":1816,"mtime":1696680376227,"results":"27","hashOfConfig":"17"},{"size":297,"mtime":1696681380141,"results":"28","hashOfConfig":"17"},{"size":323,"mtime":1696355312251,"results":"29","hashOfConfig":"17"},{"size":650,"mtime":1696450741580,"results":"30","hashOfConfig":"17"},{"size":10625,"mtime":1696680376200,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dh0erx",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"45"},"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\index.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\App.js",[],[],["80"],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\components\\Navbar.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\HomePage.js",[],[],["81"],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\ProfilePage.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\VerificationFailedPage.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\ForgotPasswordPage.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\SignUpPage.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\LoginPage.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\ResetPasswordPage.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\authentication\\VerificationSuccessPage.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\components\\SuccessMessage.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\components\\FailedMessage.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\pages\\NotFoundPage.js",[],[],"C:\\Projects\\NodeJSProjects\\map-mark-ui\\src\\components\\GoogleMap.js",["82"],[],"import React, {useState, useEffect, useCallback} from 'react';\r\nimport {GoogleMap, LoadScript, Marker, InfoWindow, Circle} from '@react-google-maps/api';\r\nimport '../styles/components/GoogleMapStyle.css';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '90vh',\r\n};\r\n\r\nconst center = {\r\n    lat: 30.046981762780838,\r\n    lng: 31.237174094852456,\r\n};\r\n\r\nfunction MyGoogleMap() {\r\n    const token = localStorage.getItem('authToken');\r\n    const userId = localStorage.getItem('userId');\r\n    const [markers, setMarkers] = useState([]);\r\n    const [activeMarker, setActiveMarker] = useState(null);\r\n    const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n    const [isDeleteMode, setIsDeleteMode] = useState(false);\r\n    const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\r\n\r\n    const fetchBookmarks = useCallback(() => {\r\n        fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `${token}`,\r\n            },\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                if (data.status.statusCode === 200) {\r\n                    const userBookmarks = data.data.map((bookmark) => ({\r\n                        lat: bookmark.coordinates.latitude,\r\n                        lng: bookmark.coordinates.longitude,\r\n                        name: bookmark.name,\r\n                        description: bookmark.description,\r\n                        bookmarkId: bookmark._id,\r\n                    }));\r\n                    setMarkers(userBookmarks); // Set markers from the database\r\n                    console.log(\"This I my Data: \", userBookmarks);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching user data:', error);\r\n            });\r\n    }, [userId, token]);\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lng = position.coords.longitude;\r\n                const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n                setMarkers([currentLocationMarker]);\r\n            });\r\n        }\r\n\r\n        fetchBookmarks();\r\n    }, [userId, token]);\r\n\r\n    const toggleBookmarkMode = () => {\r\n        setIsAddingBookmark(!isAddingBookmark);\r\n        setSelectedMarkerForDeletion(null);\r\n        setIsDeleteMode(false); // Turn off Delete Mode when switching to Add Mode\r\n    };\r\n\r\n    const toggleDeleteMode = () => {\r\n        setIsDeleteMode(!isDeleteMode);\r\n        setSelectedMarkerForDeletion(null); // Clear selected marker when entering Delete Mode\r\n    };\r\n\r\n    const handleMapClick = (event) => {\r\n        if (isAddingBookmark) {\r\n            const lat = event.latLng.lat();\r\n            const lng = event.latLng.lng();\r\n            const newMarker = {lat, lng, name: '', description: ''};\r\n            setMarkers([...markers, newMarker]);\r\n        }\r\n    };\r\n\r\n    const handleMarkerClick = (marker) => {\r\n        if (isDeleteMode) {\r\n            setSelectedMarkerForDeletion(marker); // Select marker for deletion\r\n        } else {\r\n            setActiveMarker(marker);\r\n        }\r\n    };\r\n\r\n    const deleteSelectedMarker = async () => {\r\n        if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\r\n            const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\r\n            console.log('Bookmark ID:', bookmarkId);\r\n\r\n            try {\r\n                const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\r\n                    method: 'DELETE',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: token,\r\n                    },\r\n                    body: JSON.stringify({bookmarkId}), // Send the bookmarkId in the request body\r\n                });\r\n\r\n                if (response.status === 204) {\r\n                    console.log('Bookmark deleted successfully');\r\n                    setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\r\n                    setSelectedMarkerForDeletion(null);\r\n\r\n                    // Close the InfoWindow programmatically\r\n                    const closeButton = document.querySelector('.gm-ui-hover-effect'); // This class may vary depending on your Google Maps version\r\n                    if (closeButton) {\r\n                        closeButton.click();\r\n                    }\r\n                } else {\r\n                    console.error('Error deleting bookmark');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleNameChange = (event) => {\r\n        setActiveMarker({...activeMarker, name: event.target.value});\r\n    };\r\n\r\n    const handleDescriptionChange = (event) => {\r\n        setActiveMarker({...activeMarker, description: event.target.value});\r\n    };\r\n\r\n    const saveBookmark = async () => {\r\n        if (!activeMarker || !activeMarker.name) {\r\n            return;\r\n        }\r\n\r\n        const bookmarkToSend = {\r\n            userId,\r\n            name: activeMarker.name,\r\n            coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n            description: activeMarker.description,\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: token,\r\n                },\r\n                body: JSON.stringify(bookmarkToSend),\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                console.log('Bookmark created successfully');\r\n                setMarkers([...markers, {...bookmarkToSend, bookmarkId: response.data.bookmarkId}]);\r\n                setActiveMarker(null);\r\n                setIsAddingBookmark(false);\r\n            } else {\r\n                console.error('Error creating bookmark');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n            <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n                {markers.map((marker, index) => (\r\n                    <React.Fragment key={index}>\r\n                        <Marker\r\n                            position={{lat: marker.lat, lng: marker.lng}}\r\n                            onClick={() => handleMarkerClick(marker)}\r\n                        />\r\n                        <Circle\r\n                            center={{lat: marker.lat, lng: marker.lng}}\r\n                            radius={1000} // Adjust the radius as needed\r\n                            options={{\r\n                                fillColor: 'rgba(0, 0, 255, 0.2)', // Circle fill color\r\n                                strokeColor: 'blue', // Circle border color\r\n                                strokeOpacity: 0.8,\r\n                                strokeWeight: 2,\r\n                            }}\r\n                        />\r\n                    </React.Fragment>\r\n                ))}\r\n\r\n                {activeMarker && (\r\n                    <InfoWindow\r\n                        position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n                        onCloseClick={() => setActiveMarker(null)}\r\n                    >\r\n                        <div className=\"info-window-content\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Bookmark Name\"\r\n                                value={activeMarker.name}\r\n                                onChange={handleNameChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <textarea\r\n                                placeholder=\"Bookmark Description\"\r\n                                value={activeMarker.description}\r\n                                onChange={handleDescriptionChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <button className=\"save-button\" onClick={saveBookmark}>\r\n                                Save Bookmark\r\n                            </button>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                {selectedMarkerForDeletion && (\r\n                    <InfoWindow\r\n                        position={{lat: selectedMarkerForDeletion.lat, lng: selectedMarkerForDeletion.lng}}\r\n                        onCloseClick={() => setSelectedMarkerForDeletion(null)}\r\n                    >\r\n                        <div className=\"info-window-container\">\r\n                            <div className=\"info-window-content\">\r\n                                <p>Do you want to delete this bookmark?</p>\r\n                                <div className=\"button-container\">\r\n                                    <button className=\"button\" onClick={deleteSelectedMarker}>Yes, Delete</button>\r\n                                    <button className=\"button\"\r\n                                            onClick={() => setSelectedMarkerForDeletion(null)}>Cancel\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                <div className=\"buttons-container\">\r\n                    <button\r\n                        className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n                        onClick={toggleBookmarkMode}\r\n                    >\r\n                        {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n                    </button>\r\n                    <button\r\n                        className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\r\n                        onClick={toggleDeleteMode}\r\n                    >\r\n                        {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\r\n                    </button>\r\n                </div>\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n}\r\n\r\nexport default MyGoogleMap;\r\n",{"ruleId":"83","replacedBy":"84"},{"ruleId":"83","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":559,"column":8,"nodeType":"88","endLine":559,"endColumn":23,"suggestions":"89"},"no-new-object",["90"],["90"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchBookmarks'. Either include it or remove the dependency array.","ArrayExpression",["91"],"no-object-constructor",{"desc":"92","fix":"93"},"Update the dependencies array to be: [userId, token, fetchBookmarks]",{"range":"94","text":"95"},[23846,23861],"[userId, token, fetchBookmarks]"]