{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\components\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\n// import React, {useState} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css'\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId'); // Get userId from localStorage\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false); // Flag to indicate bookmark creation mode\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         // Replace 'your_user_id' with the actual user ID\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     'Authorization': token, // Include the authentication token\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 // Bookmark created successfully\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false); // Exit bookmark creation mode\n//             } else {\n//                 // Handle errors or display an error message\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             // Handle network errors or other exceptions\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap\n//                 mapContainerStyle={containerStyle}\n//                 center={center}\n//                 zoom={14}\n//                 onClick={handleMapClick}\n//             >\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//\n//                 )}\n//\n//                 <div>\n//                     {/* Inside the GoogleMap component */}\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n// import React, {useState, useEffect} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//\n//     useEffect(() => {\n//         // Get the user's current location and add it as a marker\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\n//                 setMarkers([...markers, currentLocationMarker]);\n//             });\n//         }\n//     }, [markers]);\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 <div>\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n\n// import React, {useState, useEffect} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [status, setStatus] = useState('');\n//\n//     useEffect(() => {\n//         // Get the user's current location and add it as a marker\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\n//                 setMarkers([...markers, currentLocationMarker]);\n//             });\n//         }\n//\n//         // Fetch the user's bookmarks and add them as markers\n//         fetchBookmarks();\n//     }, [userId, token, markers]);\n//\n//     const fetchBookmarks = () => {\n//         setIsLoading(true);\n//         setStatus('');\n//\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n//             method: 'GET',\n//             headers: {\n//                 'Authorization': `${token}`,\n//             },\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 setIsLoading(false);\n//\n//                 if (data.status.statusCode === 200) {\n//                     // Assuming data.data contains an array of bookmarks\n//                     const userBookmarks = data.data.map((bookmark) => ({\n//                         lat: bookmark.coordinates.latitude,\n//                         lng: bookmark.coordinates.longitude,\n//                         name: bookmark.name,\n//                         description: bookmark.description,\n//                     }));\n//                     setMarkers([...markers, ...userBookmarks]);\n//                 } else {\n//                     setStatus('Error fetching user data');\n//                 }\n//             })\n//             .catch((error) => {\n//                 setIsLoading(false);\n//                 setStatus('Error fetching user data');\n//                 console.error('Error fetching user data:', error);\n//             });\n//     };\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 <div>\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n\n// import React, {useState, useEffect, useCallback} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//\n//     const fetchBookmarks = useCallback(() => {\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n//             method: 'GET',\n//             headers: {\n//                 'Authorization': `${token}`,\n//             },\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 if (data.status.statusCode === 200) {\n//                     const userBookmarks = data.data.map((bookmark) => ({\n//                         lat: bookmark.coordinates.latitude,\n//                         lng: bookmark.coordinates.longitude,\n//                         name: bookmark.name,\n//                         description: bookmark.description,\n//                     }));\n//                     setMarkers([...markers, ...userBookmarks]);\n//                 }\n//             })\n//             .catch((error) => {\n//                 console.error('Error fetching user data:', error);\n//             });\n//     }, [userId, token, markers]);\n//\n//     useEffect(() => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\n//                 setMarkers([...markers, currentLocationMarker]);\n//             });\n//         }\n//\n//         fetchBookmarks();\n//     }, [userId, token, markers, fetchBookmarks]);\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 <div>\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//     const [isDeleteMode, setIsDeleteMode] = useState(false);\n//\n//     const fetchBookmarks = useCallback(() => {\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n//             method: 'GET',\n//             headers: {\n//                 'Authorization': `${token}`,\n//             },\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 if (data.status.statusCode === 200) {\n//                     const userBookmarks = data.data.map((bookmark) => ({\n//                         lat: bookmark.coordinates.latitude,\n//                         lng: bookmark.coordinates.longitude,\n//                         name: bookmark.name,\n//                         description: bookmark.description,\n//                         bookmarkId: bookmark.id,\n//                     }));\n//                     setMarkers([...markers, ...userBookmarks]);\n//                 }\n//             })\n//             .catch((error) => {\n//                 console.error('Error fetching user data:', error);\n//             });\n//     }, [userId, token, markers]);\n//\n//     useEffect(() => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = { lat, lng, name: 'Current Location', description: 'You are here' };\n//                 setMarkers([...markers, currentLocationMarker]);\n//             });\n//         }\n//\n//         fetchBookmarks();\n//     }, [userId, token, markers, fetchBookmarks]);\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//         setIsDeleteMode(false); // Ensure delete mode is off when switching to add mode\n//     };\n//\n//     const toggleDeleteMode = () => {\n//         setIsDeleteMode(!isDeleteMode);\n//         setIsAddingBookmark(false); // Ensure add mode is off when switching to delete mode\n//     };\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = { lat, lng, name: '', description: '' };\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         if (isDeleteMode) {\n//             // If in delete mode, delete the clicked marker\n//             deleteBookmark(marker);\n//         } else {\n//             setActiveMarker(marker);\n//         }\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({ ...activeMarker, name: event.target.value });\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({ ...activeMarker, description: event.target.value });\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: { latitude: activeMarker.lat, longitude: activeMarker.lng },\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? { ...marker, name: '', description: '' } : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     const deleteBookmark = async (markerToDelete) => {\n//         if (!markerToDelete || !markerToDelete.bookmarkId) {\n//             return;\n//         }\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${markerToDelete.bookmarkId}/delete`, {\n//                 method: 'DELETE',\n//                 headers: {\n//                     Authorization: token,\n//                 },\n//             });\n//\n//             if (response.status === 204) {\n//                 console.log('Bookmark deleted successfully');\n//                 setMarkers(markers.filter((marker) => marker !== markerToDelete));\n//                 setActiveMarker(null);\n//                 setIsDeleteMode(false);\n//             } else {\n//                 console.error('Error deleting bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{ lat: marker.lat, lng: marker.lng }}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                             {isDeleteMode && (\n//                                 <button className=\"delete-button\" onClick={() => deleteBookmark(activeMarker)}>\n//                                     Delete Bookmark\n//                                 </button>\n//                             )}\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 <div>\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                     <button\n//                         className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\n//                         onClick={toggleDeleteMode}\n//                     >\n//                         {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport '../styles/components/GoogleMapStyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100vh'\n};\nconst center = {\n  lat: 30.046981762780838,\n  lng: 31.237174094852456\n};\nfunction MyGoogleMap() {\n  _s();\n  const token = localStorage.getItem('authToken');\n  const userId = localStorage.getItem('userId');\n  const [markers, setMarkers] = useState([]);\n  const [activeMarker, setActiveMarker] = useState(null);\n  const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\n  const fetchBookmarks = useCallback(() => {\n    fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      if (data.status.statusCode === 200) {\n        const userBookmarks = data.data.map(bookmark => ({\n          lat: bookmark.coordinates.latitude,\n          lng: bookmark.coordinates.longitude,\n          name: bookmark.name,\n          description: bookmark.description,\n          bookmarkId: bookmark.id\n        }));\n        setMarkers([...markers, ...userBookmarks]);\n      }\n    }).catch(error => {\n      console.error('Error fetching user data:', error);\n    });\n  }, [userId, token, markers]);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lng = position.coords.longitude;\n        const currentLocationMarker = {\n          lat,\n          lng,\n          name: 'Current Location',\n          description: 'You are here'\n        };\n        setMarkers([...markers, currentLocationMarker]);\n      });\n    }\n    fetchBookmarks();\n  }, [userId, token, markers, fetchBookmarks]);\n  const toggleBookmarkMode = () => {\n    console.log(\"Toggling Bookmark Mode\");\n    setIsAddingBookmark(!isAddingBookmark);\n    setSelectedMarkerForDeletion(null);\n    setIsDeleteMode(false); // Turn off Delete Mode when switching to Add Mode\n  };\n\n  const toggleDeleteMode = () => {\n    console.log(\"Toggling Delete Mode\");\n    setIsDeleteMode(!isDeleteMode);\n    setSelectedMarkerForDeletion(null); // Clear selected marker when entering Delete Mode\n  };\n\n  const handleMapClick = event => {\n    if (isAddingBookmark) {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      const newMarker = {\n        lat,\n        lng,\n        name: '',\n        description: ''\n      };\n      setMarkers([...markers, newMarker]);\n    }\n  };\n  const handleMarkerClick = marker => {\n    if (isDeleteMode) {\n      setSelectedMarkerForDeletion(marker); // Select marker for deletion\n    } else {\n      setActiveMarker(marker);\n    }\n  };\n  const deleteSelectedMarker = async () => {\n    if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\n      try {\n        const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${selectedMarkerForDeletion.bookmarkId}/delete`, {\n          method: 'DELETE',\n          headers: {\n            Authorization: token\n          }\n        });\n        if (response.status === 204) {\n          console.log('Bookmark deleted successfully');\n          setMarkers(markers.filter(marker => marker !== selectedMarkerForDeletion));\n          setSelectedMarkerForDeletion(null);\n        } else {\n          console.error('Error deleting bookmark');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleNameChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      name: event.target.value\n    });\n  };\n  const handleDescriptionChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      description: event.target.value\n    });\n  };\n  const saveBookmark = async () => {\n    if (!activeMarker || !activeMarker.name) {\n      return;\n    }\n    const bookmarkToSend = {\n      userId,\n      name: activeMarker.name,\n      coordinates: {\n        latitude: activeMarker.lat,\n        longitude: activeMarker.lng\n      },\n      description: activeMarker.description\n    };\n    try {\n      const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify(bookmarkToSend)\n      });\n      if (response.status === 201) {\n        console.log('Bookmark created successfully');\n        setMarkers(markers.map(marker => marker === activeMarker ? {\n          ...marker,\n          name: '',\n          description: ''\n        } : marker));\n        setActiveMarker(null);\n        setIsAddingBookmark(false);\n      } else {\n        console.error('Error creating bookmark');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 14,\n      onClick: handleMapClick,\n      children: [markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        onClick: () => handleMarkerClick(marker)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1050,\n        columnNumber: 21\n      }, this)), activeMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: activeMarker.lat,\n          lng: activeMarker.lng\n        },\n        onCloseClick: () => setActiveMarker(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-window-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Bookmark Name\",\n            value: activeMarker.name,\n            onChange: handleNameChange,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1063,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Bookmark Description\",\n            value: activeMarker.description,\n            onChange: handleDescriptionChange,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1070,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: saveBookmark,\n            children: \"Save Bookmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1076,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1062,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 21\n      }, this), selectedMarkerForDeletion && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selectedMarkerForDeletion.lat,\n          lng: selectedMarkerForDeletion.lng\n        },\n        onCloseClick: () => setSelectedMarkerForDeletion(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-window-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Do you want to delete this bookmark?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1089,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: deleteSelectedMarker,\n            children: \"Yes, Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1090,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedMarkerForDeletion(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1091,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1088,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1084,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`,\n          onClick: toggleBookmarkMode,\n          children: isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1097,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`,\n          onClick: toggleDeleteMode,\n          children: isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1096,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1048,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1047,\n    columnNumber: 9\n  }, this);\n}\n_s(MyGoogleMap, \"m2l9WQpJSwEglODmRumVPs4RSX0=\");\n_c = MyGoogleMap;\nexport default MyGoogleMap;\nvar _c;\n$RefreshReg$(_c, \"MyGoogleMap\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","LoadScript","Marker","InfoWindow","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MyGoogleMap","_s","token","localStorage","getItem","userId","markers","setMarkers","activeMarker","setActiveMarker","isAddingBookmark","setIsAddingBookmark","isDeleteMode","setIsDeleteMode","selectedMarkerForDeletion","setSelectedMarkerForDeletion","fetchBookmarks","fetch","method","headers","then","response","json","data","status","statusCode","userBookmarks","map","bookmark","coordinates","latitude","longitude","name","description","bookmarkId","id","catch","error","console","navigator","geolocation","getCurrentPosition","position","coords","currentLocationMarker","toggleBookmarkMode","log","toggleDeleteMode","handleMapClick","event","latLng","newMarker","handleMarkerClick","marker","deleteSelectedMarker","Authorization","filter","handleNameChange","target","value","handleDescriptionChange","saveBookmark","bookmarkToSend","body","JSON","stringify","googleMapsApiKey","children","mapContainerStyle","zoom","onClick","index","fileName","_jsxFileName","lineNumber","columnNumber","onCloseClick","className","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/components/GoogleMap.js"],"sourcesContent":["// import React, {useState} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css'\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId'); // Get userId from localStorage\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false); // Flag to indicate bookmark creation mode\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         // Replace 'your_user_id' with the actual user ID\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': token, // Include the authentication token\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 // Bookmark created successfully\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false); // Exit bookmark creation mode\r\n//             } else {\r\n//                 // Handle errors or display an error message\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             // Handle network errors or other exceptions\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap\r\n//                 mapContainerStyle={containerStyle}\r\n//                 center={center}\r\n//                 zoom={14}\r\n//                 onClick={handleMapClick}\r\n//             >\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     {/* Inside the GoogleMap component */}\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n// import React, {useState, useEffect} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//\r\n//     useEffect(() => {\r\n//         // Get the user's current location and add it as a marker\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n//                 setMarkers([...markers, currentLocationMarker]);\r\n//             });\r\n//         }\r\n//     }, [markers]);\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n\r\n// import React, {useState, useEffect} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//     const [isLoading, setIsLoading] = useState(false);\r\n//     const [status, setStatus] = useState('');\r\n//\r\n//     useEffect(() => {\r\n//         // Get the user's current location and add it as a marker\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n//                 setMarkers([...markers, currentLocationMarker]);\r\n//             });\r\n//         }\r\n//\r\n//         // Fetch the user's bookmarks and add them as markers\r\n//         fetchBookmarks();\r\n//     }, [userId, token, markers]);\r\n//\r\n//     const fetchBookmarks = () => {\r\n//         setIsLoading(true);\r\n//         setStatus('');\r\n//\r\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n//             method: 'GET',\r\n//             headers: {\r\n//                 'Authorization': `${token}`,\r\n//             },\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((data) => {\r\n//                 setIsLoading(false);\r\n//\r\n//                 if (data.status.statusCode === 200) {\r\n//                     // Assuming data.data contains an array of bookmarks\r\n//                     const userBookmarks = data.data.map((bookmark) => ({\r\n//                         lat: bookmark.coordinates.latitude,\r\n//                         lng: bookmark.coordinates.longitude,\r\n//                         name: bookmark.name,\r\n//                         description: bookmark.description,\r\n//                     }));\r\n//                     setMarkers([...markers, ...userBookmarks]);\r\n//                 } else {\r\n//                     setStatus('Error fetching user data');\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 setIsLoading(false);\r\n//                 setStatus('Error fetching user data');\r\n//                 console.error('Error fetching user data:', error);\r\n//             });\r\n//     };\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n\r\n\r\n// import React, {useState, useEffect, useCallback} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//\r\n//     const fetchBookmarks = useCallback(() => {\r\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n//             method: 'GET',\r\n//             headers: {\r\n//                 'Authorization': `${token}`,\r\n//             },\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((data) => {\r\n//                 if (data.status.statusCode === 200) {\r\n//                     const userBookmarks = data.data.map((bookmark) => ({\r\n//                         lat: bookmark.coordinates.latitude,\r\n//                         lng: bookmark.coordinates.longitude,\r\n//                         name: bookmark.name,\r\n//                         description: bookmark.description,\r\n//                     }));\r\n//                     setMarkers([...markers, ...userBookmarks]);\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.error('Error fetching user data:', error);\r\n//             });\r\n//     }, [userId, token, markers]);\r\n//\r\n//     useEffect(() => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n//                 setMarkers([...markers, currentLocationMarker]);\r\n//             });\r\n//         }\r\n//\r\n//         fetchBookmarks();\r\n//     }, [userId, token, markers, fetchBookmarks]);\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n\r\n// import React, { useState, useEffect, useCallback } from 'react';\r\n// import { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//     const [isDeleteMode, setIsDeleteMode] = useState(false);\r\n//\r\n//     const fetchBookmarks = useCallback(() => {\r\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n//             method: 'GET',\r\n//             headers: {\r\n//                 'Authorization': `${token}`,\r\n//             },\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((data) => {\r\n//                 if (data.status.statusCode === 200) {\r\n//                     const userBookmarks = data.data.map((bookmark) => ({\r\n//                         lat: bookmark.coordinates.latitude,\r\n//                         lng: bookmark.coordinates.longitude,\r\n//                         name: bookmark.name,\r\n//                         description: bookmark.description,\r\n//                         bookmarkId: bookmark.id,\r\n//                     }));\r\n//                     setMarkers([...markers, ...userBookmarks]);\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.error('Error fetching user data:', error);\r\n//             });\r\n//     }, [userId, token, markers]);\r\n//\r\n//     useEffect(() => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = { lat, lng, name: 'Current Location', description: 'You are here' };\r\n//                 setMarkers([...markers, currentLocationMarker]);\r\n//             });\r\n//         }\r\n//\r\n//         fetchBookmarks();\r\n//     }, [userId, token, markers, fetchBookmarks]);\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//         setIsDeleteMode(false); // Ensure delete mode is off when switching to add mode\r\n//     };\r\n//\r\n//     const toggleDeleteMode = () => {\r\n//         setIsDeleteMode(!isDeleteMode);\r\n//         setIsAddingBookmark(false); // Ensure add mode is off when switching to delete mode\r\n//     };\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = { lat, lng, name: '', description: '' };\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         if (isDeleteMode) {\r\n//             // If in delete mode, delete the clicked marker\r\n//             deleteBookmark(marker);\r\n//         } else {\r\n//             setActiveMarker(marker);\r\n//         }\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({ ...activeMarker, name: event.target.value });\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({ ...activeMarker, description: event.target.value });\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: { latitude: activeMarker.lat, longitude: activeMarker.lng },\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? { ...marker, name: '', description: '' } : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     const deleteBookmark = async (markerToDelete) => {\r\n//         if (!markerToDelete || !markerToDelete.bookmarkId) {\r\n//             return;\r\n//         }\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${markerToDelete.bookmarkId}/delete`, {\r\n//                 method: 'DELETE',\r\n//                 headers: {\r\n//                     Authorization: token,\r\n//                 },\r\n//             });\r\n//\r\n//             if (response.status === 204) {\r\n//                 console.log('Bookmark deleted successfully');\r\n//                 setMarkers(markers.filter((marker) => marker !== markerToDelete));\r\n//                 setActiveMarker(null);\r\n//                 setIsDeleteMode(false);\r\n//             } else {\r\n//                 console.error('Error deleting bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{ lat: marker.lat, lng: marker.lng }}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                             {isDeleteMode && (\r\n//                                 <button className=\"delete-button\" onClick={() => deleteBookmark(activeMarker)}>\r\n//                                     Delete Bookmark\r\n//                                 </button>\r\n//                             )}\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                     <button\r\n//                         className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\r\n//                         onClick={toggleDeleteMode}\r\n//                     >\r\n//                         {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport '../styles/components/GoogleMapStyle.css';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '100vh',\r\n};\r\n\r\nconst center = {\r\n    lat: 30.046981762780838,\r\n    lng: 31.237174094852456,\r\n};\r\n\r\nfunction MyGoogleMap() {\r\n    const token = localStorage.getItem('authToken');\r\n    const userId = localStorage.getItem('userId');\r\n    const [markers, setMarkers] = useState([]);\r\n    const [activeMarker, setActiveMarker] = useState(null);\r\n    const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n    const [isDeleteMode, setIsDeleteMode] = useState(false);\r\n    const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\r\n\r\n    const fetchBookmarks = useCallback(() => {\r\n        fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `${token}`,\r\n            },\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                if (data.status.statusCode === 200) {\r\n                    const userBookmarks = data.data.map((bookmark) => ({\r\n                        lat: bookmark.coordinates.latitude,\r\n                        lng: bookmark.coordinates.longitude,\r\n                        name: bookmark.name,\r\n                        description: bookmark.description,\r\n                        bookmarkId: bookmark.id,\r\n                    }));\r\n                    setMarkers([...markers, ...userBookmarks]);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching user data:', error);\r\n            });\r\n    }, [userId, token, markers]);\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lng = position.coords.longitude;\r\n                const currentLocationMarker = { lat, lng, name: 'Current Location', description: 'You are here' };\r\n                setMarkers([...markers, currentLocationMarker]);\r\n            });\r\n        }\r\n\r\n        fetchBookmarks();\r\n    }, [userId, token, markers, fetchBookmarks]);\r\n\r\n    const toggleBookmarkMode = () => {\r\n        console.log(\"Toggling Bookmark Mode\");\r\n        setIsAddingBookmark(!isAddingBookmark);\r\n        setSelectedMarkerForDeletion(null);\r\n        setIsDeleteMode(false); // Turn off Delete Mode when switching to Add Mode\r\n    };\r\n\r\n    const toggleDeleteMode = () => {\r\n        console.log(\"Toggling Delete Mode\");\r\n        setIsDeleteMode(!isDeleteMode);\r\n        setSelectedMarkerForDeletion(null); // Clear selected marker when entering Delete Mode\r\n    };\r\n\r\n    const handleMapClick = (event) => {\r\n        if (isAddingBookmark) {\r\n            const lat = event.latLng.lat();\r\n            const lng = event.latLng.lng();\r\n            const newMarker = { lat, lng, name: '', description: '' };\r\n            setMarkers([...markers, newMarker]);\r\n        }\r\n    };\r\n\r\n    const handleMarkerClick = (marker) => {\r\n        if (isDeleteMode) {\r\n            setSelectedMarkerForDeletion(marker); // Select marker for deletion\r\n        } else {\r\n            setActiveMarker(marker);\r\n        }\r\n    };\r\n\r\n    const deleteSelectedMarker = async () => {\r\n        if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\r\n            try {\r\n                const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${selectedMarkerForDeletion.bookmarkId}/delete`, {\r\n                    method: 'DELETE',\r\n                    headers: {\r\n                        Authorization: token,\r\n                    },\r\n                });\r\n\r\n                if (response.status === 204) {\r\n                    console.log('Bookmark deleted successfully');\r\n                    setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\r\n                    setSelectedMarkerForDeletion(null);\r\n                } else {\r\n                    console.error('Error deleting bookmark');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleNameChange = (event) => {\r\n        setActiveMarker({ ...activeMarker, name: event.target.value });\r\n    };\r\n\r\n    const handleDescriptionChange = (event) => {\r\n        setActiveMarker({ ...activeMarker, description: event.target.value });\r\n    };\r\n\r\n    const saveBookmark = async () => {\r\n        if (!activeMarker || !activeMarker.name) {\r\n            return;\r\n        }\r\n\r\n        const bookmarkToSend = {\r\n            userId,\r\n            name: activeMarker.name,\r\n            coordinates: { latitude: activeMarker.lat, longitude: activeMarker.lng },\r\n            description: activeMarker.description,\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: token,\r\n                },\r\n                body: JSON.stringify(bookmarkToSend),\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                console.log('Bookmark created successfully');\r\n                setMarkers(\r\n                    markers.map((marker) =>\r\n                        marker === activeMarker ? { ...marker, name: '', description: '' } : marker\r\n                    )\r\n                );\r\n                setActiveMarker(null);\r\n                setIsAddingBookmark(false);\r\n            } else {\r\n                console.error('Error creating bookmark');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n            <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n                {markers.map((marker, index) => (\r\n                    <Marker\r\n                        key={index}\r\n                        position={{ lat: marker.lat, lng: marker.lng }}\r\n                        onClick={() => handleMarkerClick(marker)}\r\n                    />\r\n                ))}\r\n\r\n                {activeMarker && (\r\n                    <InfoWindow\r\n                        position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\r\n                        onCloseClick={() => setActiveMarker(null)}\r\n                    >\r\n                        <div className=\"info-window-content\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Bookmark Name\"\r\n                                value={activeMarker.name}\r\n                                onChange={handleNameChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <textarea\r\n                                placeholder=\"Bookmark Description\"\r\n                                value={activeMarker.description}\r\n                                onChange={handleDescriptionChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <button className=\"save-button\" onClick={saveBookmark}>\r\n                                Save Bookmark\r\n                            </button>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                {selectedMarkerForDeletion && (\r\n                    <InfoWindow\r\n                        position={{ lat: selectedMarkerForDeletion.lat, lng: selectedMarkerForDeletion.lng }}\r\n                        onCloseClick={() => setSelectedMarkerForDeletion(null)}\r\n                    >\r\n                        <div className=\"info-window-content\">\r\n                            <p>Do you want to delete this bookmark?</p>\r\n                            <button onClick={deleteSelectedMarker}>Yes, Delete</button>\r\n                            <button onClick={() => setSelectedMarkerForDeletion(null)}>Cancel</button>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                <div className=\"buttons-container\">\r\n                    <button\r\n                        className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n                        onClick={toggleBookmarkMode}\r\n                    >\r\n                        {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n                    </button>\r\n                    <button\r\n                        className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\r\n                        onClick={toggleDeleteMode}\r\n                    >\r\n                        {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\r\n                    </button>\r\n                </div>\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n}\r\n\r\nexport default MyGoogleMap;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}