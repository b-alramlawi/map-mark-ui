{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\pages\\\\authentication\\\\ResetPasswordPage.js\",\n  _s = $RefreshSig$();\n// import React, {useState} from 'react';\n// import '../../styles/pages/authentication/ResetPasswordStyle.css';\n//\n// function ResetPasswordPage() {\n//     const [newPassword, setNewPassword] = useState('');\n//     const [message, setMessage] = useState('');\n//\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//\n//         // Add your logic here to reset the password\n//         // You can use an API call to update the password\n//\n//         // Display a success or error message based on the result\n//         setMessage('Password reset successful.');\n//     };\n//\n//     return (\n//         <div className=\"reset-password-container\" style={{backgroundImage: `url(${process.env.PUBLIC_URL}/map.png)`}}>\n//             <div className=\"reset-password-form\">\n//                 <h2 className=\"form-title\">Reset Password</h2>\n//                 <form onSubmit={handleSubmit}>\n//                     <div className=\"form-group\">\n//                         <label htmlFor=\"new-password\">New Password:</label>\n//                         <input\n//                             type=\"password\"\n//                             id=\"new-password\"\n//                             value={newPassword}\n//                             onChange={(e) => setNewPassword(e.target.value)}\n//                             required\n//                             className=\"input-field\"\n//                         />\n//                     </div>\n//                     <button type=\"submit\" className=\"submit-button\">\n//                         Reset Password\n//                     </button>\n//                 </form>\n//                 <p className=\"message\">{message}</p>\n//             </div>\n//         </div>\n//     );\n// }\n//\n// export default ResetPasswordPage;\n\nimport React, { useState, useEffect } from 'react';\nimport '../../styles/pages/authentication/ResetPasswordStyle.css'; // Import the CSS for styling\nimport SuccessMessage from '../../components/SuccessMessage'; // Import the SuccessMessage component\nimport FailedMessage from \"../../components/FailedMessage\"; // Import the ErrorMessage component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResetPasswordPage() {\n  _s();\n  const [newPassword, setNewPassword] = useState('');\n  const [message, setMessage] = useState(''); // Initialize to an empty string\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  useEffect(() => {\n    const resetPassword = async () => {\n      setIsSubmitting(true);\n      try {\n        // Make an API call to reset the password\n        const response = await fetch('http://localhost:3000/api/auth/reset-password/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            newPassword\n          })\n        });\n        if (response.ok) {\n          // Password reset was successful\n          setMessage('Password reset successful.');\n\n          // Clear the newPassword input field\n          setNewPassword('');\n        } else {\n          // Password reset failed\n          setMessage('Error resetting password. Please try again.');\n        }\n      } catch (error) {\n        console.error('Error resetting password:', error);\n        setMessage('Internal server error. Please try again later.');\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n    resetPassword();\n  }, [newPassword]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reset-password-container\",\n    style: {\n      backgroundImage: `url(${process.env.PUBLIC_URL}/map.png)`\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-password-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"form-title\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => e.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"new-password\",\n            children: \"New Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"new-password\",\n            value: newPassword,\n            onChange: e => setNewPassword(e.target.value),\n            required: true,\n            className: \"input-field\",\n            disabled: isSubmitting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isSubmitting,\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), message && (message.includes('successful') ? /*#__PURE__*/_jsxDEV(SuccessMessage, {\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(FailedMessage, {\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n_s(ResetPasswordPage, \"1MI/JvOU1VpQNsTQJiASwM+OL7o=\");\n_c = ResetPasswordPage;\nexport default ResetPasswordPage;\nvar _c;\n$RefreshReg$(_c, \"ResetPasswordPage\");","map":{"version":3,"names":["React","useState","useEffect","SuccessMessage","FailedMessage","jsxDEV","_jsxDEV","ResetPasswordPage","_s","newPassword","setNewPassword","message","setMessage","isSubmitting","setIsSubmitting","resetPassword","response","fetch","method","headers","body","JSON","stringify","ok","error","console","className","style","backgroundImage","process","env","PUBLIC_URL","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","e","preventDefault","htmlFor","type","id","value","onChange","target","required","disabled","includes","_c","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/pages/authentication/ResetPasswordPage.js"],"sourcesContent":["// import React, {useState} from 'react';\r\n// import '../../styles/pages/authentication/ResetPasswordStyle.css';\r\n//\r\n// function ResetPasswordPage() {\r\n//     const [newPassword, setNewPassword] = useState('');\r\n//     const [message, setMessage] = useState('');\r\n//\r\n//     const handleSubmit = (e) => {\r\n//         e.preventDefault();\r\n//\r\n//         // Add your logic here to reset the password\r\n//         // You can use an API call to update the password\r\n//\r\n//         // Display a success or error message based on the result\r\n//         setMessage('Password reset successful.');\r\n//     };\r\n//\r\n//     return (\r\n//         <div className=\"reset-password-container\" style={{backgroundImage: `url(${process.env.PUBLIC_URL}/map.png)`}}>\r\n//             <div className=\"reset-password-form\">\r\n//                 <h2 className=\"form-title\">Reset Password</h2>\r\n//                 <form onSubmit={handleSubmit}>\r\n//                     <div className=\"form-group\">\r\n//                         <label htmlFor=\"new-password\">New Password:</label>\r\n//                         <input\r\n//                             type=\"password\"\r\n//                             id=\"new-password\"\r\n//                             value={newPassword}\r\n//                             onChange={(e) => setNewPassword(e.target.value)}\r\n//                             required\r\n//                             className=\"input-field\"\r\n//                         />\r\n//                     </div>\r\n//                     <button type=\"submit\" className=\"submit-button\">\r\n//                         Reset Password\r\n//                     </button>\r\n//                 </form>\r\n//                 <p className=\"message\">{message}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n// export default ResetPasswordPage;\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport '../../styles/pages/authentication/ResetPasswordStyle.css'; // Import the CSS for styling\r\nimport SuccessMessage from '../../components/SuccessMessage'; // Import the SuccessMessage component\r\nimport FailedMessage from \"../../components/FailedMessage\"; // Import the ErrorMessage component\r\n\r\nfunction ResetPasswordPage() {\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [message, setMessage] = useState(''); // Initialize to an empty string\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const resetPassword = async () => {\r\n            setIsSubmitting(true);\r\n\r\n            try {\r\n                // Make an API call to reset the password\r\n                const response = await fetch('http://localhost:3000/api/auth/reset-password/', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({newPassword}),\r\n                });\r\n\r\n                if (response.ok) {\r\n                    // Password reset was successful\r\n                    setMessage('Password reset successful.');\r\n\r\n                    // Clear the newPassword input field\r\n                    setNewPassword('');\r\n                } else {\r\n                    // Password reset failed\r\n                    setMessage('Error resetting password. Please try again.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error resetting password:', error);\r\n                setMessage('Internal server error. Please try again later.');\r\n            } finally {\r\n                setIsSubmitting(false);\r\n            }\r\n        };\r\n\r\n        resetPassword();\r\n    }, [newPassword]);\r\n\r\n    return (\r\n        <div className=\"reset-password-container\" style={{backgroundImage: `url(${process.env.PUBLIC_URL}/map.png)`}}>\r\n            <div className=\"reset-password-form\">\r\n                <h2 className=\"form-title\">Reset Password</h2>\r\n                <form onSubmit={(e) => e.preventDefault()}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"new-password\">New Password:</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"new-password\"\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            required\r\n                            className=\"input-field\"\r\n                            disabled={isSubmitting}\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"submit-button\" disabled={isSubmitting}>\r\n                        Reset Password\r\n                    </button>\r\n                </form>\r\n                {message && (\r\n                    message.includes('successful') ? (\r\n                        <SuccessMessage message={message}/>\r\n                    ) : (\r\n                        <FailedMessage message={message}/>\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResetPasswordPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}