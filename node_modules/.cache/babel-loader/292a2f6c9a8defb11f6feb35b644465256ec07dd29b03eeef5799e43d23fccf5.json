{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\components\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\n// import React, {useState} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css'\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId'); // Get userId from localStorage\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false); // Flag to indicate bookmark creation mode\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         // Replace 'your_user_id' with the actual user ID\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     'Authorization': token, // Include the authentication token\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 // Bookmark created successfully\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false); // Exit bookmark creation mode\n//             } else {\n//                 // Handle errors or display an error message\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             // Handle network errors or other exceptions\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap\n//                 mapContainerStyle={containerStyle}\n//                 center={center}\n//                 zoom={14}\n//                 onClick={handleMapClick}\n//             >\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//\n//                 )}\n//\n//                 <div>\n//                     {/* Inside the GoogleMap component */}\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n// import React, {useState, useEffect} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//\n//     useEffect(() => {\n//         // Get the user's current location and add it as a marker\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\n//                 setMarkers([...markers, currentLocationMarker]);\n//             });\n//         }\n//     }, [markers]);\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 <div>\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport '../styles/components/GoogleMapStyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100vh'\n};\nconst center = {\n  lat: 30.046981762780838,\n  lng: 31.237174094852456\n};\nfunction MyGoogleMap() {\n  _s();\n  const token = localStorage.getItem('authToken');\n  const userId = localStorage.getItem('userId');\n  const [markers, setMarkers] = useState([]);\n  const [activeMarker, setActiveMarker] = useState(null);\n  const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n  const [userBookmarks, setUserBookmarks] = useState([]); // Store the user's bookmarks\n\n  // Function to fetch the user's bookmarks\n  const fetchUserBookmarks = async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': token // Include the authentication token\n        }\n      });\n\n      if (response.status === 200) {\n        const data = await response.json();\n        setUserBookmarks(data); // Set the user's bookmarks in state\n      } else {\n        // Handle errors or display an error message\n        console.error('Error fetching user bookmarks');\n      }\n    } catch (error) {\n      // Handle network errors or other exceptions\n      console.error('Error:', error);\n    }\n  };\n\n  // Fetch user bookmarks when the component mounts\n  useEffect(() => {\n    fetchUserBookmarks();\n  }, []); // Empty dependency array to run this effect only once\n\n  // Function to get the user's current location and add it as a marker\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lng = position.coords.longitude;\n        const currentLocationMarker = {\n          lat,\n          lng,\n          name: 'Current Location',\n          description: 'You are here'\n        };\n        setMarkers([...markers, currentLocationMarker]);\n      });\n    }\n  }, [markers]);\n  const handleMapClick = event => {\n    if (isAddingBookmark) {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      const newMarker = {\n        lat,\n        lng,\n        name: '',\n        description: ''\n      };\n      setMarkers([...markers, newMarker]);\n    }\n  };\n  const handleMarkerClick = marker => {\n    setActiveMarker(marker);\n  };\n  const handleNameChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      name: event.target.value\n    });\n  };\n  const handleDescriptionChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      description: event.target.value\n    });\n  };\n  const toggleBookmarkMode = () => {\n    setIsAddingBookmark(!isAddingBookmark);\n  };\n  const saveBookmark = async () => {\n    if (!activeMarker || !activeMarker.name) {\n      return;\n    }\n    const bookmarkToSend = {\n      userId,\n      name: activeMarker.name,\n      coordinates: {\n        latitude: activeMarker.lat,\n        longitude: activeMarker.lng\n      },\n      description: activeMarker.description\n    };\n    try {\n      const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify(bookmarkToSend)\n      });\n      if (response.status === 201) {\n        console.log('Bookmark created successfully');\n        setMarkers(markers.map(marker => marker === activeMarker ? {\n          ...marker,\n          name: '',\n          description: ''\n        } : marker));\n        setActiveMarker(null);\n        setIsAddingBookmark(false);\n      } else {\n        console.error('Error creating bookmark');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"YOUR_API_KEY\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 14,\n      onClick: handleMapClick,\n      children: [userBookmarks.map((bookmark, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: bookmark.coordinates.latitude,\n          lng: bookmark.coordinates.longitude\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 21\n      }, this)), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        onClick: () => handleMarkerClick(marker)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 21\n      }, this)), activeMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: activeMarker.lat,\n          lng: activeMarker.lng\n        },\n        onCloseClick: () => setActiveMarker(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-window-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Bookmark Name\",\n            value: activeMarker.name,\n            onChange: handleNameChange,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Bookmark Description\",\n            value: activeMarker.description,\n            onChange: handleDescriptionChange,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: saveBookmark,\n            children: \"Save Bookmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`,\n          onClick: toggleBookmarkMode,\n          children: isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 9\n  }, this);\n}\n_s(MyGoogleMap, \"YgUdgQaP+xwoaLH+seywKU5o4dg=\");\n_c = MyGoogleMap;\nexport default MyGoogleMap;\nvar _c;\n$RefreshReg$(_c, \"MyGoogleMap\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","InfoWindow","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MyGoogleMap","_s","token","localStorage","getItem","userId","markers","setMarkers","activeMarker","setActiveMarker","isAddingBookmark","setIsAddingBookmark","userBookmarks","setUserBookmarks","fetchUserBookmarks","response","fetch","method","headers","status","data","json","console","error","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","currentLocationMarker","name","description","handleMapClick","event","latLng","newMarker","handleMarkerClick","marker","handleNameChange","target","value","handleDescriptionChange","toggleBookmarkMode","saveBookmark","bookmarkToSend","coordinates","Authorization","body","JSON","stringify","log","map","googleMapsApiKey","children","mapContainerStyle","zoom","onClick","bookmark","index","fileName","_jsxFileName","lineNumber","columnNumber","onCloseClick","className","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/components/GoogleMap.js"],"sourcesContent":["// import React, {useState} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css'\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId'); // Get userId from localStorage\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false); // Flag to indicate bookmark creation mode\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         // Replace 'your_user_id' with the actual user ID\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': token, // Include the authentication token\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 // Bookmark created successfully\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false); // Exit bookmark creation mode\r\n//             } else {\r\n//                 // Handle errors or display an error message\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             // Handle network errors or other exceptions\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap\r\n//                 mapContainerStyle={containerStyle}\r\n//                 center={center}\r\n//                 zoom={14}\r\n//                 onClick={handleMapClick}\r\n//             >\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     {/* Inside the GoogleMap component */}\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n// import React, {useState, useEffect} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//\r\n//     useEffect(() => {\r\n//         // Get the user's current location and add it as a marker\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n//                 setMarkers([...markers, currentLocationMarker]);\r\n//             });\r\n//         }\r\n//     }, [markers]);\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\nimport React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport '../styles/components/GoogleMapStyle.css';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '100vh',\r\n};\r\n\r\nconst center = {\r\n    lat: 30.046981762780838,\r\n    lng: 31.237174094852456,\r\n};\r\n\r\nfunction MyGoogleMap() {\r\n    const token = localStorage.getItem('authToken');\r\n    const userId = localStorage.getItem('userId');\r\n    const [markers, setMarkers] = useState([]);\r\n    const [activeMarker, setActiveMarker] = useState(null);\r\n    const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n    const [userBookmarks, setUserBookmarks] = useState([]); // Store the user's bookmarks\r\n\r\n    // Function to fetch the user's bookmarks\r\n    const fetchUserBookmarks = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': token, // Include the authentication token\r\n                },\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                const data = await response.json();\r\n                setUserBookmarks(data); // Set the user's bookmarks in state\r\n            } else {\r\n                // Handle errors or display an error message\r\n                console.error('Error fetching user bookmarks');\r\n            }\r\n        } catch (error) {\r\n            // Handle network errors or other exceptions\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    // Fetch user bookmarks when the component mounts\r\n    useEffect(() => {\r\n        fetchUserBookmarks();\r\n    }, []); // Empty dependency array to run this effect only once\r\n\r\n    // Function to get the user's current location and add it as a marker\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lng = position.coords.longitude;\r\n                const currentLocationMarker = { lat, lng, name: 'Current Location', description: 'You are here' };\r\n                setMarkers([...markers, currentLocationMarker]);\r\n            });\r\n        }\r\n    }, [markers]);\r\n\r\n    const handleMapClick = (event) => {\r\n        if (isAddingBookmark) {\r\n            const lat = event.latLng.lat();\r\n            const lng = event.latLng.lng();\r\n            const newMarker = { lat, lng, name: '', description: '' };\r\n            setMarkers([...markers, newMarker]);\r\n        }\r\n    };\r\n\r\n    const handleMarkerClick = (marker) => {\r\n        setActiveMarker(marker);\r\n    };\r\n\r\n    const handleNameChange = (event) => {\r\n        setActiveMarker({ ...activeMarker, name: event.target.value });\r\n    };\r\n\r\n    const handleDescriptionChange = (event) => {\r\n        setActiveMarker({ ...activeMarker, description: event.target.value });\r\n    };\r\n\r\n    const toggleBookmarkMode = () => {\r\n        setIsAddingBookmark(!isAddingBookmark);\r\n    };\r\n\r\n    const saveBookmark = async () => {\r\n        if (!activeMarker || !activeMarker.name) {\r\n            return;\r\n        }\r\n\r\n        const bookmarkToSend = {\r\n            userId,\r\n            name: activeMarker.name,\r\n            coordinates: { latitude: activeMarker.lat, longitude: activeMarker.lng },\r\n            description: activeMarker.description,\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: token,\r\n                },\r\n                body: JSON.stringify(bookmarkToSend),\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                console.log('Bookmark created successfully');\r\n                setMarkers(\r\n                    markers.map((marker) =>\r\n                        marker === activeMarker ? { ...marker, name: '', description: '' } : marker\r\n                    )\r\n                );\r\n                setActiveMarker(null);\r\n                setIsAddingBookmark(false);\r\n            } else {\r\n                console.error('Error creating bookmark');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <LoadScript googleMapsApiKey=\"YOUR_API_KEY\">\r\n            <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n                {/* Render markers for userBookmarks */}\r\n                {userBookmarks.map((bookmark, index) => (\r\n                    <Marker\r\n                        key={index}\r\n                        position={{ lat: bookmark.coordinates.latitude, lng: bookmark.coordinates.longitude }}\r\n                    />\r\n                ))}\r\n\r\n                {/* Render markers for user added bookmarks */}\r\n                {markers.map((marker, index) => (\r\n                    <Marker\r\n                        key={index}\r\n                        position={{ lat: marker.lat, lng: marker.lng }}\r\n                        onClick={() => handleMarkerClick(marker)}\r\n                    />\r\n                ))}\r\n\r\n                {activeMarker && (\r\n                    <InfoWindow\r\n                        position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\r\n                        onCloseClick={() => setActiveMarker(null)}\r\n                    >\r\n                        <div className=\"info-window-content\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Bookmark Name\"\r\n                                value={activeMarker.name}\r\n                                onChange={handleNameChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <textarea\r\n                                placeholder=\"Bookmark Description\"\r\n                                value={activeMarker.description}\r\n                                onChange={handleDescriptionChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <button className=\"save-button\" onClick={saveBookmark}>\r\n                                Save Bookmark\r\n                            </button>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                <div>\r\n                    <button\r\n                        className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n                        onClick={toggleBookmarkMode}\r\n                    >\r\n                        {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n                    </button>\r\n                </div>\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n}\r\n\r\nexport default MyGoogleMap;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}