{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\components\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import {GoogleMap, LoadScript} from '@react-google-maps/api';\n//\n// const containerStyle = {\n//     width: '100%', // Full width of the available space\n//     height: '100%', // Full height of the available space\n// };\n//\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456\n// };\n//\n// function MyGoogleMap() {\n//     return (\n//         <LoadScript\n//             googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\"\n//         >\n//             <GoogleMap\n//                 mapContainerStyle={containerStyle}\n//                 center={center}\n//                 zoom={14}\n//             >\n//                 {/* You can add markers, polygons, or other map elements here */}\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n\nimport React, { useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { useJsApiLoader } from '@react-google-maps/api';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100vh'\n};\nconst defaultCenter = {\n  lat: 30.046981762780838,\n  lng: 31.237174094852456\n};\nconst libraries = ['places']; // Load the places library\n\nfunction MyGoogleMap() {\n  _s();\n  const [map, setMap] = useState(null);\n  const [searchValue, setSearchValue] = useState('');\n  const [markerPosition, setMarkerPosition] = useState(null);\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: 'YOUR_API_KEY',\n    // Replace with your API key\n    libraries\n  });\n  const {\n    suggestions,\n    setValue\n  } = usePlacesAutocomplete();\n  const onMapLoad = map => {\n    setMap(map);\n  };\n  const onSearchChange = e => {\n    setSearchValue(e.target.value);\n    setValue(e.target.value);\n  };\n  const onSearchSelect = async value => {\n    setSearchValue(value);\n    try {\n      const results = await getGeocode({\n        address: value\n      });\n      const {\n        lat,\n        lng\n      } = await getLatLng(results[0]);\n      setMarkerPosition({\n        lat,\n        lng\n      });\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search for places...\",\n      value: searchValue,\n      onChange: onSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), isLoaded && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => onSearchSelect(suggestion.description),\n        children: suggestion.description\n      }, suggestion.placeId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: defaultCenter,\n        zoom: 14,\n        onLoad: onMapLoad,\n        children: markerPosition && /*#__PURE__*/_jsxDEV(Marker, {\n          position: markerPosition,\n          title: \"Selected Location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n_s(MyGoogleMap, \"1S8pRfzJhgGSnt2KrdAZA5iGTSY=\", false, function () {\n  return [useJsApiLoader, usePlacesAutocomplete];\n});\n_c = MyGoogleMap;\nexport default MyGoogleMap;\nvar _c;\n$RefreshReg$(_c, \"MyGoogleMap\");","map":{"version":3,"names":["React","useState","GoogleMap","LoadScript","Marker","useJsApiLoader","usePlacesAutocomplete","getGeocode","getLatLng","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","libraries","MyGoogleMap","_s","map","setMap","searchValue","setSearchValue","markerPosition","setMarkerPosition","isLoaded","googleMapsApiKey","suggestions","setValue","onMapLoad","onSearchChange","e","target","value","onSearchSelect","results","address","error","console","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","suggestion","onClick","description","placeId","mapContainerStyle","center","zoom","onLoad","position","title","_c","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/components/GoogleMap.js"],"sourcesContent":["// import React from 'react';\r\n// import {GoogleMap, LoadScript} from '@react-google-maps/api';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%', // Full width of the available space\r\n//     height: '100%', // Full height of the available space\r\n// };\r\n//\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     return (\r\n//         <LoadScript\r\n//             googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\"\r\n//         >\r\n//             <GoogleMap\r\n//                 mapContainerStyle={containerStyle}\r\n//                 center={center}\r\n//                 zoom={14}\r\n//             >\r\n//                 {/* You can add markers, polygons, or other map elements here */}\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n\r\nimport React, { useState } from 'react';\r\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\nimport { useJsApiLoader } from '@react-google-maps/api';\r\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '100vh',\r\n};\r\n\r\nconst defaultCenter = {\r\n    lat: 30.046981762780838,\r\n    lng: 31.237174094852456,\r\n};\r\n\r\nconst libraries = ['places']; // Load the places library\r\n\r\nfunction MyGoogleMap() {\r\n    const [map, setMap] = useState(null);\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [markerPosition, setMarkerPosition] = useState(null);\r\n\r\n    const { isLoaded } = useJsApiLoader({\r\n        googleMapsApiKey: 'YOUR_API_KEY', // Replace with your API key\r\n        libraries,\r\n    });\r\n\r\n    const { suggestions, setValue } = usePlacesAutocomplete();\r\n\r\n    const onMapLoad = (map) => {\r\n        setMap(map);\r\n    };\r\n\r\n    const onSearchChange = (e) => {\r\n        setSearchValue(e.target.value);\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const onSearchSelect = async (value) => {\r\n        setSearchValue(value);\r\n\r\n        try {\r\n            const results = await getGeocode({ address: value });\r\n            const { lat, lng } = await getLatLng(results[0]);\r\n            setMarkerPosition({ lat, lng });\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Search for places...\"\r\n                value={searchValue}\r\n                onChange={onSearchChange}\r\n            />\r\n            {isLoaded && (\r\n                <ul>\r\n                    {suggestions.map((suggestion) => (\r\n                        <li key={suggestion.placeId} onClick={() => onSearchSelect(suggestion.description)}>\r\n                            {suggestion.description}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n\r\n            <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n                <GoogleMap\r\n                    mapContainerStyle={containerStyle}\r\n                    center={defaultCenter}\r\n                    zoom={14}\r\n                    onLoad={onMapLoad}\r\n                >\r\n                    {markerPosition && (\r\n                        <Marker\r\n                            position={markerPosition}\r\n                            title=\"Selected Location\"\r\n                        />\r\n                    )}\r\n                </GoogleMap>\r\n            </LoadScript>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyGoogleMap;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,wBAAwB;AACtE,SAASC,cAAc,QAAQ,wBAAwB;AACvD,OAAOC,qBAAqB,IAAIC,UAAU,EAAEC,SAAS,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvF,MAAMC,cAAc,GAAG;EACnBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,aAAa,GAAG;EAClBC,GAAG,EAAE,kBAAkB;EACvBC,GAAG,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAE9B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAM;IAAEyB;EAAS,CAAC,GAAGrB,cAAc,CAAC;IAChCsB,gBAAgB,EAAE,cAAc;IAAE;IAClCV;EACJ,CAAC,CAAC;EAEF,MAAM;IAAEW,WAAW;IAAEC;EAAS,CAAC,GAAGvB,qBAAqB,CAAC,CAAC;EAEzD,MAAMwB,SAAS,GAAIV,GAAG,IAAK;IACvBC,MAAM,CAACD,GAAG,CAAC;EACf,CAAC;EAED,MAAMW,cAAc,GAAIC,CAAC,IAAK;IAC1BT,cAAc,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAC9BL,QAAQ,CAACG,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMC,cAAc,GAAG,MAAOD,KAAK,IAAK;IACpCX,cAAc,CAACW,KAAK,CAAC;IAErB,IAAI;MACA,MAAME,OAAO,GAAG,MAAM7B,UAAU,CAAC;QAAE8B,OAAO,EAAEH;MAAM,CAAC,CAAC;MACpD,MAAM;QAAEnB,GAAG;QAAEC;MAAI,CAAC,GAAG,MAAMR,SAAS,CAAC4B,OAAO,CAAC,CAAC,CAAC,CAAC;MAChDX,iBAAiB,CAAC;QAAEV,GAAG;QAAEC;MAAI,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,oBACI5B,OAAA;IAAA8B,QAAA,gBACI9B,OAAA;MACI+B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,sBAAsB;MAClCR,KAAK,EAAEZ,WAAY;MACnBqB,QAAQ,EAAEZ;IAAe;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,EACDrB,QAAQ,iBACLhB,OAAA;MAAA8B,QAAA,EACKZ,WAAW,CAACR,GAAG,CAAE4B,UAAU,iBACxBtC,OAAA;QAA6BuC,OAAO,EAAEA,CAAA,KAAMd,cAAc,CAACa,UAAU,CAACE,WAAW,CAAE;QAAAV,QAAA,EAC9EQ,UAAU,CAACE;MAAW,GADlBF,UAAU,CAACG,OAAO;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEvB,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACP,eAEDrC,OAAA,CAACP,UAAU;MAACwB,gBAAgB,EAAC,yCAAyC;MAAAa,QAAA,eAClE9B,OAAA,CAACR,SAAS;QACNkD,iBAAiB,EAAEzC,cAAe;QAClC0C,MAAM,EAAEvC,aAAc;QACtBwC,IAAI,EAAE,EAAG;QACTC,MAAM,EAAEzB,SAAU;QAAAU,QAAA,EAEjBhB,cAAc,iBACXd,OAAA,CAACN,MAAM;UACHoD,QAAQ,EAAEhC,cAAe;UACzBiC,KAAK,EAAC;QAAmB;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B;MACJ;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEd;AAAC5B,EAAA,CApEQD,WAAW;EAAA,QAKKb,cAAc,EAKDC,qBAAqB;AAAA;AAAAoD,EAAA,GAVlDxC,WAAW;AAsEpB,eAAeA,WAAW;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}