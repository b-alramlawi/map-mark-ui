{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\PrivateRoute.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  const authToken = localStorage.getItem('authToken');\n\n  // Check if the authToken exists and is not expired (you may need to implement this logic)\n  const isTokenValid = authToken && !isTokenExpired(authToken);\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: props => isTokenValid ? /*#__PURE__*/_jsxDEV(Component, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }, this) // Redirect to the login page if the token is invalid\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n\n// Implement your token expiration logic here\n_c = PrivateRoute;\nfunction isTokenExpired(token) {\n  // Add your token expiration logic here\n  // For example, check the token's expiration date\n  // Return true if expired, false otherwise\n}\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Route","Redirect","jsxDEV","_jsxDEV","PrivateRoute","component","Component","rest","authToken","localStorage","getItem","isTokenValid","isTokenExpired","render","props","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","token","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n    const authToken = localStorage.getItem('authToken');\r\n\r\n    // Check if the authToken exists and is not expired (you may need to implement this logic)\r\n    const isTokenValid = authToken && !isTokenExpired(authToken);\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) =>\r\n                isTokenValid ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    <Redirect to=\"/login\"/> // Redirect to the login page if the token is invalid\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\n// Implement your token expiration logic here\r\nfunction isTokenExpired(token) {\r\n    // Add your token expiration logic here\r\n    // For example, check the token's expiration date\r\n    // Return true if expired, false otherwise\r\n}\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,KAAK,EAAEC,QAAQ,QAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,YAAY,GAAGA,CAAC;EAACC,SAAS,EAAEC,SAAS;EAAE,GAAGC;AAAI,CAAC,KAAK;EACtD,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;;EAEnD;EACA,MAAMC,YAAY,GAAGH,SAAS,IAAI,CAACI,cAAc,CAACJ,SAAS,CAAC;EAE5D,oBACIL,OAAA,CAACH,KAAK;IAAA,GACEO,IAAI;IACRM,MAAM,EAAGC,KAAK,IACVH,YAAY,gBACRR,OAAA,CAACG,SAAS;MAAA,GAAKQ;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAExBf,OAAA,CAACF,QAAQ;MAACkB,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,CAAC;EAE/B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;;AAED;AAAAE,EAAA,GApBMhB,YAAY;AAqBlB,SAASQ,cAAcA,CAACS,KAAK,EAAE;EAC3B;EACA;EACA;AAAA;AAGJ,eAAejB,YAAY;AAAC,IAAAgB,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}