{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\pages\\\\authentication\\\\ForgotPasswordPage.js\",\n  _s = $RefreshSig$();\n// import React, {useState} from 'react';\n// import '../../styles/pages/authentication/ForgotPasswordStyle.css'; // Import the CSS for styling\n//\n// function ForgotPasswordPage() {\n//     const [email, setEmail] = useState('');\n//     const [message, setMessage] = useState('');\n//\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//\n//         // Add your logic here to send a password reset email\n//         // You can use an API call to send the email\n//\n//         // Display a success or error message based on the result\n//         setMessage('Password reset email sent successfully.');\n//     };\n//\n//     return (\n//         <div className=\"forgot-password-container\" style={{backgroundImage: `url(${process.env.PUBLIC_URL}/map.png)`}}>\n//             <div className=\"forgot-password-form\">\n//                 <h2 className=\"form-title\">Forgot Password</h2>\n//                 <form onSubmit={handleSubmit}>\n//                     <div className=\"form-group\">\n//                         <label htmlFor=\"email\">Email:</label>\n//                         <input\n//                             type=\"email\"\n//                             id=\"email\"\n//                             value={email}\n//                             onChange={(e) => setEmail(e.target.value)}\n//                             required\n//                             className=\"input-field\"\n//                         />\n//                     </div>\n//                     <button type=\"submit\" className=\"submit-button\">\n//                         Send Reset Email\n//                     </button>\n//                 </form>\n//                 <p className=\"message\">{message}</p>\n//             </div>\n//         </div>\n//     );\n// }\n//\n// export default ForgotPasswordPage;\n//\n// import React, { useState } from 'react';\n// import '../../styles/pages/authentication/ForgotPasswordStyle.css'; // Import the CSS for styling\n//\n// function ForgotPasswordPage() {\n//     const [email, setEmail] = useState('');\n//     const [message, setMessage] = useState('');\n//\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//\n//         // Add your logic here to send a password reset email\n//         try {\n//             const response = await fetch('http://localhost:3000/api/auth/forgot-password', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ email }),\n//             });\n//\n//             if (response.status === 200) {\n//                 setMessage('Password reset email sent successfully.');\n//             } else {\n//                 setMessage('Error sending password reset email. Please try again.');\n//             }\n//         } catch (error) {\n//             console.error('Error sending password reset email:', error);\n//             setMessage('Internal server error. Please try again later.');\n//         }\n//     };\n//\n//     return (\n//         <div className=\"forgot-password-container\" style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/map.png)` }}>\n//             <div className=\"forgot-password-form\">\n//                 <h2 className=\"form-title\">Forgot Password</h2>\n//                 <form onSubmit={handleSubmit}>\n//                     <div className=\"form-group\">\n//                         <label htmlFor=\"email\">Email:</label>\n//                         <input\n//                             type=\"email\"\n//                             id=\"email\"\n//                             value={email}\n//                             onChange={(e) => setEmail(e.target.value)}\n//                             required\n//                             className=\"input-field\"\n//                         />\n//                     </div>\n//                     <button type=\"submit\" className=\"submit-button\">\n//                         Send Reset Email\n//                     </button>\n//                 </form>\n//                 <p className=\"message\">{message}</p>\n//             </div>\n//         </div>\n//     );\n// }\n//\n// export default ForgotPasswordPage;\n\nimport React, { useState } from 'react';\nimport '../../styles/pages/authentication/ForgotPasswordStyle.css'; // Import the CSS for styling\nimport SuccessMessage from '../../components/SuccessMessage'; // Import the SuccessMessage component\nimport FailedMessage from \"../../components/FailedMessage\"; // Import the ErrorMessage component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ForgotPasswordPage() {\n  _s();\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    try {\n      // Add your logic here to send a password reset email\n\n      // Assuming the email was sent successfully\n      setMessage('Password reset email sent successfully.');\n    } catch (error) {\n      console.error('Error sending password reset email:', error);\n      setMessage('Internal server error. Please try again later.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forgot-password-container\",\n    style: {\n      backgroundImage: `url(${process.env.PUBLIC_URL}/map.png)`\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forgot-password-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"form-title\",\n        children: \"Forgot Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            required: true,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: isSubmitting,\n          children: \"Send Reset Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), message && (message.includes('successfully') ? /*#__PURE__*/_jsxDEV(SuccessMessage, {\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(FailedMessage, {\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n}\n_s(ForgotPasswordPage, \"muIEntKHOkkDzUE+99CDVTGxIP0=\");\n_c = ForgotPasswordPage;\nexport default ForgotPasswordPage;\nvar _c;\n$RefreshReg$(_c, \"ForgotPasswordPage\");","map":{"version":3,"names":["React","useState","SuccessMessage","FailedMessage","jsxDEV","_jsxDEV","ForgotPasswordPage","_s","email","setEmail","message","setMessage","isSubmitting","setIsSubmitting","handleSubmit","e","preventDefault","error","console","className","style","backgroundImage","process","env","PUBLIC_URL","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","required","disabled","includes","_c","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/pages/authentication/ForgotPasswordPage.js"],"sourcesContent":["// import React, {useState} from 'react';\r\n// import '../../styles/pages/authentication/ForgotPasswordStyle.css'; // Import the CSS for styling\r\n//\r\n// function ForgotPasswordPage() {\r\n//     const [email, setEmail] = useState('');\r\n//     const [message, setMessage] = useState('');\r\n//\r\n//     const handleSubmit = (e) => {\r\n//         e.preventDefault();\r\n//\r\n//         // Add your logic here to send a password reset email\r\n//         // You can use an API call to send the email\r\n//\r\n//         // Display a success or error message based on the result\r\n//         setMessage('Password reset email sent successfully.');\r\n//     };\r\n//\r\n//     return (\r\n//         <div className=\"forgot-password-container\" style={{backgroundImage: `url(${process.env.PUBLIC_URL}/map.png)`}}>\r\n//             <div className=\"forgot-password-form\">\r\n//                 <h2 className=\"form-title\">Forgot Password</h2>\r\n//                 <form onSubmit={handleSubmit}>\r\n//                     <div className=\"form-group\">\r\n//                         <label htmlFor=\"email\">Email:</label>\r\n//                         <input\r\n//                             type=\"email\"\r\n//                             id=\"email\"\r\n//                             value={email}\r\n//                             onChange={(e) => setEmail(e.target.value)}\r\n//                             required\r\n//                             className=\"input-field\"\r\n//                         />\r\n//                     </div>\r\n//                     <button type=\"submit\" className=\"submit-button\">\r\n//                         Send Reset Email\r\n//                     </button>\r\n//                 </form>\r\n//                 <p className=\"message\">{message}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n// export default ForgotPasswordPage;\r\n//\r\n// import React, { useState } from 'react';\r\n// import '../../styles/pages/authentication/ForgotPasswordStyle.css'; // Import the CSS for styling\r\n//\r\n// function ForgotPasswordPage() {\r\n//     const [email, setEmail] = useState('');\r\n//     const [message, setMessage] = useState('');\r\n//\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//\r\n//         // Add your logic here to send a password reset email\r\n//         try {\r\n//             const response = await fetch('http://localhost:3000/api/auth/forgot-password', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ email }),\r\n//             });\r\n//\r\n//             if (response.status === 200) {\r\n//                 setMessage('Password reset email sent successfully.');\r\n//             } else {\r\n//                 setMessage('Error sending password reset email. Please try again.');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error sending password reset email:', error);\r\n//             setMessage('Internal server error. Please try again later.');\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <div className=\"forgot-password-container\" style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/map.png)` }}>\r\n//             <div className=\"forgot-password-form\">\r\n//                 <h2 className=\"form-title\">Forgot Password</h2>\r\n//                 <form onSubmit={handleSubmit}>\r\n//                     <div className=\"form-group\">\r\n//                         <label htmlFor=\"email\">Email:</label>\r\n//                         <input\r\n//                             type=\"email\"\r\n//                             id=\"email\"\r\n//                             value={email}\r\n//                             onChange={(e) => setEmail(e.target.value)}\r\n//                             required\r\n//                             className=\"input-field\"\r\n//                         />\r\n//                     </div>\r\n//                     <button type=\"submit\" className=\"submit-button\">\r\n//                         Send Reset Email\r\n//                     </button>\r\n//                 </form>\r\n//                 <p className=\"message\">{message}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n// export default ForgotPasswordPage;\r\n\r\nimport React, {useState} from 'react';\r\nimport '../../styles/pages/authentication/ForgotPasswordStyle.css'; // Import the CSS for styling\r\nimport SuccessMessage from '../../components/SuccessMessage'; // Import the SuccessMessage component\r\nimport FailedMessage from \"../../components/FailedMessage\"; // Import the ErrorMessage component\r\n\r\nfunction ForgotPasswordPage() {\r\n    const [email, setEmail] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setIsSubmitting(true);\r\n\r\n        try {\r\n            // Add your logic here to send a password reset email\r\n\r\n            // Assuming the email was sent successfully\r\n            setMessage('Password reset email sent successfully.');\r\n        } catch (error) {\r\n            console.error('Error sending password reset email:', error);\r\n            setMessage('Internal server error. Please try again later.');\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"forgot-password-container\" style={{backgroundImage: `url(${process.env.PUBLIC_URL}/map.png)`}}>\r\n            <div className=\"forgot-password-form\">\r\n                <h2 className=\"form-title\">Forgot Password</h2>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"email\">Email:</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            required\r\n                            className=\"input-field\"\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"submit-button\" disabled={isSubmitting}>\r\n                        Send Reset Email\r\n                    </button>\r\n                </form>\r\n                {message && (\r\n                    message.includes('successfully') ? (\r\n                        <SuccessMessage message={message}/>\r\n                    ) : (\r\n                        <FailedMessage message={message}/>\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForgotPasswordPage;\r\n\r\n\r\n"],"mappingsrC,OAAO,2DAA2D,CAAC,CAAC;AACpE,OAAOC,cAAc,MAAM,iCAAiC,CAAC,CAAC;AAC9D,OAAOC,aAAa,MAAM,gCAAgC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMa,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBH,eAAe,CAAC,IAAI,CAAC;IAErB,IAAI;MACA;;MAEA;MACAF,UAAU,CAAC,yCAAyC,CAAC;IACzD,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3DN,UAAU,CAAC,gDAAgD,CAAC;IAChE,CAAC,SAAS;MACNE,eAAe,CAAC,KAAK,CAAC;IAC1B;EACJ,CAAC;EAED,oBACIR,OAAA;IAAKc,SAAS,EAAC,2BAA2B;IAACC,KAAK,EAAE;MAACC,eAAe,EAAG,OAAMC,OAAO,CAACC,GAAG,CAACC,UAAW;IAAU,CAAE;IAAAC,QAAA,eAC1GpB,OAAA;MAAKc,SAAS,EAAC,sBAAsB;MAAAM,QAAA,gBACjCpB,OAAA;QAAIc,SAAS,EAAC,YAAY;QAAAM,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/CxB,OAAA;QAAMyB,QAAQ,EAAEhB,YAAa;QAAAW,QAAA,gBACzBpB,OAAA;UAAKc,SAAS,EAAC,YAAY;UAAAM,QAAA,gBACvBpB,OAAA;YAAO0B,OAAO,EAAC,OAAO;YAAAN,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACrCxB,OAAA;YACI2B,IAAI,EAAC,OAAO;YACZC,EAAE,EAAC,OAAO;YACVC,KAAK,EAAE1B,KAAM;YACb2B,QAAQ,EAAGpB,CAAC,IAAKN,QAAQ,CAACM,CAAC,CAACqB,MAAM,CAACF,KAAK,CAAE;YAC1CG,QAAQ;YACRlB,SAAS,EAAC;UAAa;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eACNxB,OAAA;UAAQ2B,IAAI,EAAC,QAAQ;UAACb,SAAS,EAAC,eAAe;UAACmB,QAAQ,EAAE1B,YAAa;UAAAa,QAAA,EAAC;QAExE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC,EACNnB,OAAO,KACJA,OAAO,CAAC6B,QAAQ,CAAC,cAAc,CAAC,gBAC5BlC,OAAA,CAACH,cAAc;QAACQ,OAAO,EAAEA;MAAQ;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,gBAEnCxB,OAAA,CAACF,aAAa;QAACO,OAAO,EAAEA;MAAQ;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CACpC,CACJ;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACtB,EAAA,CApDQD,kBAAkB;AAAAkC,EAAA,GAAlBlC,kBAAkB;AAsD3B,eAAeA,kBAAkB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}