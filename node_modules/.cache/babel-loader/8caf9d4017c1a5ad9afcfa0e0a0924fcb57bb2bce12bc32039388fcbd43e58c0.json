{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\components\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\n// import React, {useState} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css'\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId'); // Get userId from localStorage\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false); // Flag to indicate bookmark creation mode\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         // Replace 'your_user_id' with the actual user ID\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     'Authorization': token, // Include the authentication token\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 // Bookmark created successfully\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false); // Exit bookmark creation mode\n//             } else {\n//                 // Handle errors or display an error message\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             // Handle network errors or other exceptions\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap\n//                 mapContainerStyle={containerStyle}\n//                 center={center}\n//                 zoom={14}\n//                 onClick={handleMapClick}\n//             >\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//\n//                 )}\n//\n//                 <div>\n//                     {/* Inside the GoogleMap component */}\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n// import React, {useState, useEffect} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//\n//     useEffect(() => {\n//         // Get the user's current location and add it as a marker\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\n//                 setMarkers([...markers, currentLocationMarker]);\n//             });\n//         }\n//     }, [markers]);\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 <div>\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n\n// import React, {useState, useEffect} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [status, setStatus] = useState('');\n//\n//     useEffect(() => {\n//         // Get the user's current location and add it as a marker\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\n//                 setMarkers([...markers, currentLocationMarker]);\n//             });\n//         }\n//\n//         // Fetch the user's bookmarks and add them as markers\n//         fetchBookmarks();\n//     }, [userId, token, markers]);\n//\n//     const fetchBookmarks = () => {\n//         setIsLoading(true);\n//         setStatus('');\n//\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n//             method: 'GET',\n//             headers: {\n//                 'Authorization': `${token}`,\n//             },\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 setIsLoading(false);\n//\n//                 if (data.status.statusCode === 200) {\n//                     // Assuming data.data contains an array of bookmarks\n//                     const userBookmarks = data.data.map((bookmark) => ({\n//                         lat: bookmark.coordinates.latitude,\n//                         lng: bookmark.coordinates.longitude,\n//                         name: bookmark.name,\n//                         description: bookmark.description,\n//                     }));\n//                     setMarkers([...markers, ...userBookmarks]);\n//                 } else {\n//                     setStatus('Error fetching user data');\n//                 }\n//             })\n//             .catch((error) => {\n//                 setIsLoading(false);\n//                 setStatus('Error fetching user data');\n//                 console.error('Error fetching user data:', error);\n//             });\n//     };\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 <div>\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n\n// import React, {useState, useEffect, useCallback} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//\n//     const fetchBookmarks = useCallback(() => {\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n//             method: 'GET',\n//             headers: {\n//                 'Authorization': `${token}`,\n//             },\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 if (data.status.statusCode === 200) {\n//                     const userBookmarks = data.data.map((bookmark) => ({\n//                         lat: bookmark.coordinates.latitude,\n//                         lng: bookmark.coordinates.longitude,\n//                         name: bookmark.name,\n//                         description: bookmark.description,\n//                     }));\n//                     setMarkers([...markers, ...userBookmarks]);\n//                 }\n//             })\n//             .catch((error) => {\n//                 console.error('Error fetching user data:', error);\n//             });\n//     }, [userId, token, markers]);\n//\n//     useEffect(() => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\n//                 setMarkers([...markers, currentLocationMarker]);\n//             });\n//         }\n//\n//         fetchBookmarks();\n//     }, [userId, token, markers, fetchBookmarks]);\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 <div>\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//     const [isDeleteMode, setIsDeleteMode] = useState(false);\n//\n//     const fetchBookmarks = useCallback(() => {\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n//             method: 'GET',\n//             headers: {\n//                 'Authorization': `${token}`,\n//             },\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 if (data.status.statusCode === 200) {\n//                     const userBookmarks = data.data.map((bookmark) => ({\n//                         lat: bookmark.coordinates.latitude,\n//                         lng: bookmark.coordinates.longitude,\n//                         name: bookmark.name,\n//                         description: bookmark.description,\n//                         bookmarkId: bookmark.id,\n//                     }));\n//                     setMarkers([...markers, ...userBookmarks]);\n//                 }\n//             })\n//             .catch((error) => {\n//                 console.error('Error fetching user data:', error);\n//             });\n//     }, [userId, token, markers]);\n//\n//     useEffect(() => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = { lat, lng, name: 'Current Location', description: 'You are here' };\n//                 setMarkers([...markers, currentLocationMarker]);\n//             });\n//         }\n//\n//         fetchBookmarks();\n//     }, [userId, token, markers, fetchBookmarks]);\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//         setIsDeleteMode(false); // Ensure delete mode is off when switching to add mode\n//     };\n//\n//     const toggleDeleteMode = () => {\n//         setIsDeleteMode(!isDeleteMode);\n//         setIsAddingBookmark(false); // Ensure add mode is off when switching to delete mode\n//     };\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = { lat, lng, name: '', description: '' };\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         if (isDeleteMode) {\n//             // If in delete mode, delete the clicked marker\n//             deleteBookmark(marker);\n//         } else {\n//             setActiveMarker(marker);\n//         }\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({ ...activeMarker, name: event.target.value });\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({ ...activeMarker, description: event.target.value });\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: { latitude: activeMarker.lat, longitude: activeMarker.lng },\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? { ...marker, name: '', description: '' } : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     const deleteBookmark = async (markerToDelete) => {\n//         if (!markerToDelete || !markerToDelete.bookmarkId) {\n//             return;\n//         }\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${markerToDelete.bookmarkId}/delete`, {\n//                 method: 'DELETE',\n//                 headers: {\n//                     Authorization: token,\n//                 },\n//             });\n//\n//             if (response.status === 204) {\n//                 console.log('Bookmark deleted successfully');\n//                 setMarkers(markers.filter((marker) => marker !== markerToDelete));\n//                 setActiveMarker(null);\n//                 setIsDeleteMode(false);\n//             } else {\n//                 console.error('Error deleting bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{ lat: marker.lat, lng: marker.lng }}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                             {isDeleteMode && (\n//                                 <button className=\"delete-button\" onClick={() => deleteBookmark(activeMarker)}>\n//                                     Delete Bookmark\n//                                 </button>\n//                             )}\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 <div>\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                     <button\n//                         className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\n//                         onClick={toggleDeleteMode}\n//                     >\n//                         {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, LoadScript, Circle, InfoWindow } from '@react-google-maps/api';\nimport '../styles/components/GoogleMapStyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100vh'\n};\nconst center = {\n  lat: 30.046981762780838,\n  lng: 31.237174094852456\n};\nfunction MyGoogleMap() {\n  _s();\n  const token = localStorage.getItem('authToken');\n  const userId = localStorage.getItem('userId');\n  const [circles, setCircles] = useState([]);\n  const [activeCircle, setActiveCircle] = useState(null);\n  const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n  const fetchBookmarks = useCallback(() => {\n    fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      if (data.status.statusCode === 200) {\n        const userCircles = data.data.map(bookmark => ({\n          lat: bookmark.coordinates.latitude,\n          lng: bookmark.coordinates.longitude,\n          name: bookmark.name,\n          description: bookmark.description\n        }));\n        setCircles([...circles, ...userCircles]);\n      }\n    }).catch(error => {\n      console.error('Error fetching user data:', error);\n    });\n  }, [userId, token, circles]);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lng = position.coords.longitude;\n        const currentLocationCircle = {\n          lat,\n          lng,\n          radius: 100,\n          // Adjust the radius as needed\n          name: 'Current Location',\n          description: 'You are here'\n        };\n        setCircles([...circles, currentLocationCircle]);\n      });\n    }\n    fetchBookmarks();\n  }, [userId, token, circles, fetchBookmarks]);\n  const handleMapClick = event => {\n    if (isAddingBookmark) {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      const newCircle = {\n        lat,\n        lng,\n        radius: 100,\n        // Adjust the radius as needed\n        name: '',\n        description: ''\n      };\n      setCircles([...circles, newCircle]);\n    }\n  };\n  const handleCircleClick = circle => {\n    setActiveCircle(circle);\n  };\n  const handleNameChange = event => {\n    setActiveCircle({\n      ...activeCircle,\n      name: event.target.value\n    });\n  };\n  const handleDescriptionChange = event => {\n    setActiveCircle({\n      ...activeCircle,\n      description: event.target.value\n    });\n  };\n  const toggleBookmarkMode = () => {\n    setIsAddingBookmark(!isAddingBookmark);\n  };\n  const saveBookmark = async () => {\n    if (!activeCircle || !activeCircle.name) {\n      return;\n    }\n    const bookmarkToSend = {\n      userId,\n      name: activeCircle.name,\n      coordinates: {\n        latitude: activeCircle.lat,\n        longitude: activeCircle.lng\n      },\n      description: activeCircle.description\n    };\n    try {\n      const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify(bookmarkToSend)\n      });\n      if (response.status === 201) {\n        console.log('Bookmark created successfully');\n        setCircles(circles.map(circle => circle === activeCircle ? {\n          ...circle,\n          name: '',\n          description: ''\n        } : circle));\n        setActiveCircle(null);\n        setIsAddingBookmark(false);\n      } else {\n        console.error('Error creating bookmark');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"YOUR_API_KEY\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 14,\n      onClick: handleMapClick,\n      children: [circles.map((circle, index) => /*#__PURE__*/_jsxDEV(Circle, {\n        center: {\n          lat: circle.lat,\n          lng: circle.lng\n        },\n        radius: circle.radius,\n        onClick: () => handleCircleClick(circle)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1031,\n        columnNumber: 21\n      }, this)), activeCircle && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: activeCircle.lat,\n          lng: activeCircle.lng\n        },\n        onCloseClick: () => setActiveCircle(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-window-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Bookmark Name\",\n            value: activeCircle.name,\n            onChange: handleNameChange,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1045,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Bookmark Description\",\n            value: activeCircle.description,\n            onChange: handleDescriptionChange,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1052,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: saveBookmark,\n            children: \"Save Bookmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1058,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1044,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1040,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`,\n          onClick: toggleBookmarkMode,\n          children: isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1065,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1029,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1028,\n    columnNumber: 9\n  }, this);\n}\n_s(MyGoogleMap, \"Fu6nYOgpuA0jO/cYmcenoqcKsos=\");\n_c = MyGoogleMap;\nexport default MyGoogleMap;\nvar _c;\n$RefreshReg$(_c, \"MyGoogleMap\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","LoadScript","Circle","InfoWindow","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MyGoogleMap","_s","token","localStorage","getItem","userId","circles","setCircles","activeCircle","setActiveCircle","isAddingBookmark","setIsAddingBookmark","fetchBookmarks","fetch","method","headers","Authorization","then","response","json","data","status","statusCode","userCircles","map","bookmark","coordinates","latitude","longitude","name","description","catch","error","console","navigator","geolocation","getCurrentPosition","position","coords","currentLocationCircle","radius","handleMapClick","event","latLng","newCircle","handleCircleClick","circle","handleNameChange","target","value","handleDescriptionChange","toggleBookmarkMode","saveBookmark","bookmarkToSend","body","JSON","stringify","log","googleMapsApiKey","children","mapContainerStyle","zoom","onClick","index","fileName","_jsxFileName","lineNumber","columnNumber","onCloseClick","className","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/components/GoogleMap.js"],"sourcesContent":["// import React, {useState} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css'\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId'); // Get userId from localStorage\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false); // Flag to indicate bookmark creation mode\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         // Replace 'your_user_id' with the actual user ID\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': token, // Include the authentication token\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 // Bookmark created successfully\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false); // Exit bookmark creation mode\r\n//             } else {\r\n//                 // Handle errors or display an error message\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             // Handle network errors or other exceptions\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap\r\n//                 mapContainerStyle={containerStyle}\r\n//                 center={center}\r\n//                 zoom={14}\r\n//                 onClick={handleMapClick}\r\n//             >\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     {/* Inside the GoogleMap component */}\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n// import React, {useState, useEffect} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//\r\n//     useEffect(() => {\r\n//         // Get the user's current location and add it as a marker\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n//                 setMarkers([...markers, currentLocationMarker]);\r\n//             });\r\n//         }\r\n//     }, [markers]);\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n\r\n// import React, {useState, useEffect} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//     const [isLoading, setIsLoading] = useState(false);\r\n//     const [status, setStatus] = useState('');\r\n//\r\n//     useEffect(() => {\r\n//         // Get the user's current location and add it as a marker\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n//                 setMarkers([...markers, currentLocationMarker]);\r\n//             });\r\n//         }\r\n//\r\n//         // Fetch the user's bookmarks and add them as markers\r\n//         fetchBookmarks();\r\n//     }, [userId, token, markers]);\r\n//\r\n//     const fetchBookmarks = () => {\r\n//         setIsLoading(true);\r\n//         setStatus('');\r\n//\r\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n//             method: 'GET',\r\n//             headers: {\r\n//                 'Authorization': `${token}`,\r\n//             },\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((data) => {\r\n//                 setIsLoading(false);\r\n//\r\n//                 if (data.status.statusCode === 200) {\r\n//                     // Assuming data.data contains an array of bookmarks\r\n//                     const userBookmarks = data.data.map((bookmark) => ({\r\n//                         lat: bookmark.coordinates.latitude,\r\n//                         lng: bookmark.coordinates.longitude,\r\n//                         name: bookmark.name,\r\n//                         description: bookmark.description,\r\n//                     }));\r\n//                     setMarkers([...markers, ...userBookmarks]);\r\n//                 } else {\r\n//                     setStatus('Error fetching user data');\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 setIsLoading(false);\r\n//                 setStatus('Error fetching user data');\r\n//                 console.error('Error fetching user data:', error);\r\n//             });\r\n//     };\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, {useState, useEffect, useCallback} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//\r\n//     const fetchBookmarks = useCallback(() => {\r\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n//             method: 'GET',\r\n//             headers: {\r\n//                 'Authorization': `${token}`,\r\n//             },\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((data) => {\r\n//                 if (data.status.statusCode === 200) {\r\n//                     const userBookmarks = data.data.map((bookmark) => ({\r\n//                         lat: bookmark.coordinates.latitude,\r\n//                         lng: bookmark.coordinates.longitude,\r\n//                         name: bookmark.name,\r\n//                         description: bookmark.description,\r\n//                     }));\r\n//                     setMarkers([...markers, ...userBookmarks]);\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.error('Error fetching user data:', error);\r\n//             });\r\n//     }, [userId, token, markers]);\r\n//\r\n//     useEffect(() => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n//                 setMarkers([...markers, currentLocationMarker]);\r\n//             });\r\n//         }\r\n//\r\n//         fetchBookmarks();\r\n//     }, [userId, token, markers, fetchBookmarks]);\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n\r\n// import React, { useState, useEffect, useCallback } from 'react';\r\n// import { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//     const [isDeleteMode, setIsDeleteMode] = useState(false);\r\n//\r\n//     const fetchBookmarks = useCallback(() => {\r\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n//             method: 'GET',\r\n//             headers: {\r\n//                 'Authorization': `${token}`,\r\n//             },\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((data) => {\r\n//                 if (data.status.statusCode === 200) {\r\n//                     const userBookmarks = data.data.map((bookmark) => ({\r\n//                         lat: bookmark.coordinates.latitude,\r\n//                         lng: bookmark.coordinates.longitude,\r\n//                         name: bookmark.name,\r\n//                         description: bookmark.description,\r\n//                         bookmarkId: bookmark.id,\r\n//                     }));\r\n//                     setMarkers([...markers, ...userBookmarks]);\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.error('Error fetching user data:', error);\r\n//             });\r\n//     }, [userId, token, markers]);\r\n//\r\n//     useEffect(() => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = { lat, lng, name: 'Current Location', description: 'You are here' };\r\n//                 setMarkers([...markers, currentLocationMarker]);\r\n//             });\r\n//         }\r\n//\r\n//         fetchBookmarks();\r\n//     }, [userId, token, markers, fetchBookmarks]);\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//         setIsDeleteMode(false); // Ensure delete mode is off when switching to add mode\r\n//     };\r\n//\r\n//     const toggleDeleteMode = () => {\r\n//         setIsDeleteMode(!isDeleteMode);\r\n//         setIsAddingBookmark(false); // Ensure add mode is off when switching to delete mode\r\n//     };\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = { lat, lng, name: '', description: '' };\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         if (isDeleteMode) {\r\n//             // If in delete mode, delete the clicked marker\r\n//             deleteBookmark(marker);\r\n//         } else {\r\n//             setActiveMarker(marker);\r\n//         }\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({ ...activeMarker, name: event.target.value });\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({ ...activeMarker, description: event.target.value });\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: { latitude: activeMarker.lat, longitude: activeMarker.lng },\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? { ...marker, name: '', description: '' } : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     const deleteBookmark = async (markerToDelete) => {\r\n//         if (!markerToDelete || !markerToDelete.bookmarkId) {\r\n//             return;\r\n//         }\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${markerToDelete.bookmarkId}/delete`, {\r\n//                 method: 'DELETE',\r\n//                 headers: {\r\n//                     Authorization: token,\r\n//                 },\r\n//             });\r\n//\r\n//             if (response.status === 204) {\r\n//                 console.log('Bookmark deleted successfully');\r\n//                 setMarkers(markers.filter((marker) => marker !== markerToDelete));\r\n//                 setActiveMarker(null);\r\n//                 setIsDeleteMode(false);\r\n//             } else {\r\n//                 console.error('Error deleting bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{ lat: marker.lat, lng: marker.lng }}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                             {isDeleteMode && (\r\n//                                 <button className=\"delete-button\" onClick={() => deleteBookmark(activeMarker)}>\r\n//                                     Delete Bookmark\r\n//                                 </button>\r\n//                             )}\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 <div>\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                     <button\r\n//                         className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\r\n//                         onClick={toggleDeleteMode}\r\n//                     >\r\n//                         {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { GoogleMap, LoadScript, Circle, InfoWindow } from '@react-google-maps/api';\r\nimport '../styles/components/GoogleMapStyle.css';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '100vh',\r\n};\r\n\r\nconst center = {\r\n    lat: 30.046981762780838,\r\n    lng: 31.237174094852456,\r\n};\r\n\r\nfunction MyGoogleMap() {\r\n    const token = localStorage.getItem('authToken');\r\n    const userId = localStorage.getItem('userId');\r\n    const [circles, setCircles] = useState([]);\r\n    const [activeCircle, setActiveCircle] = useState(null);\r\n    const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n\r\n    const fetchBookmarks = useCallback(() => {\r\n        fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: `${token}`,\r\n            },\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                if (data.status.statusCode === 200) {\r\n                    const userCircles = data.data.map((bookmark) => ({\r\n                        lat: bookmark.coordinates.latitude,\r\n                        lng: bookmark.coordinates.longitude,\r\n                        name: bookmark.name,\r\n                        description: bookmark.description,\r\n                    }));\r\n                    setCircles([...circles, ...userCircles]);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching user data:', error);\r\n            });\r\n    }, [userId, token, circles]);\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lng = position.coords.longitude;\r\n                const currentLocationCircle = {\r\n                    lat,\r\n                    lng,\r\n                    radius: 100, // Adjust the radius as needed\r\n                    name: 'Current Location',\r\n                    description: 'You are here',\r\n                };\r\n                setCircles([...circles, currentLocationCircle]);\r\n            });\r\n        }\r\n\r\n        fetchBookmarks();\r\n    }, [userId, token, circles, fetchBookmarks]);\r\n\r\n    const handleMapClick = (event) => {\r\n        if (isAddingBookmark) {\r\n            const lat = event.latLng.lat();\r\n            const lng = event.latLng.lng();\r\n            const newCircle = {\r\n                lat,\r\n                lng,\r\n                radius: 100, // Adjust the radius as needed\r\n                name: '',\r\n                description: '',\r\n            };\r\n            setCircles([...circles, newCircle]);\r\n        }\r\n    };\r\n\r\n    const handleCircleClick = (circle) => {\r\n        setActiveCircle(circle);\r\n    };\r\n\r\n    const handleNameChange = (event) => {\r\n        setActiveCircle({ ...activeCircle, name: event.target.value });\r\n    };\r\n\r\n    const handleDescriptionChange = (event) => {\r\n        setActiveCircle({ ...activeCircle, description: event.target.value });\r\n    };\r\n\r\n    const toggleBookmarkMode = () => {\r\n        setIsAddingBookmark(!isAddingBookmark);\r\n    };\r\n\r\n    const saveBookmark = async () => {\r\n        if (!activeCircle || !activeCircle.name) {\r\n            return;\r\n        }\r\n\r\n        const bookmarkToSend = {\r\n            userId,\r\n            name: activeCircle.name,\r\n            coordinates: { latitude: activeCircle.lat, longitude: activeCircle.lng },\r\n            description: activeCircle.description,\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: token,\r\n                },\r\n                body: JSON.stringify(bookmarkToSend),\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                console.log('Bookmark created successfully');\r\n                setCircles(\r\n                    circles.map((circle) =>\r\n                        circle === activeCircle ? { ...circle, name: '', description: '' } : circle\r\n                    )\r\n                );\r\n                setActiveCircle(null);\r\n                setIsAddingBookmark(false);\r\n            } else {\r\n                console.error('Error creating bookmark');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <LoadScript googleMapsApiKey=\"YOUR_API_KEY\">\r\n            <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n                {circles.map((circle, index) => (\r\n                    <Circle\r\n                        key={index}\r\n                        center={{ lat: circle.lat, lng: circle.lng }}\r\n                        radius={circle.radius}\r\n                        onClick={() => handleCircleClick(circle)}\r\n                    />\r\n                ))}\r\n\r\n                {activeCircle && (\r\n                    <InfoWindow\r\n                        position={{ lat: activeCircle.lat, lng: activeCircle.lng }}\r\n                        onCloseClick={() => setActiveCircle(null)}\r\n                    >\r\n                        <div className=\"info-window-content\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Bookmark Name\"\r\n                                value={activeCircle.name}\r\n                                onChange={handleNameChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <textarea\r\n                                placeholder=\"Bookmark Description\"\r\n                                value={activeCircle.description}\r\n                                onChange={handleDescriptionChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <button className=\"save-button\" onClick={saveBookmark}>\r\n                                Save Bookmark\r\n                            </button>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                <div>\r\n                    <button\r\n                        className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n                        onClick={toggleBookmarkMode}\r\n                    >\r\n                        {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n                    </button>\r\n                </div>\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n}\r\n\r\nexport default MyGoogleMap;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}