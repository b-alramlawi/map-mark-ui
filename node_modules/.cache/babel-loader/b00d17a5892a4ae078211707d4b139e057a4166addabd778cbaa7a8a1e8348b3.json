{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\components\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\n// import React, {useState, useEffect, useCallback} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//     const [isDeleteMode, setIsDeleteMode] = useState(false);\n//     const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\n//\n//\n//     const fetchBookmarks = useCallback(() => {\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n//             method: 'GET',\n//             headers: {\n//                 'Authorization': `${token}`,\n//             },\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 if (data.status.statusCode === 200) {\n//                     const userBookmarks = data.data.map((bookmark) => ({\n//                         lat: bookmark.coordinates.latitude,\n//                         lng: bookmark.coordinates.longitude,\n//                         name: bookmark.name,\n//                         description: bookmark.description,\n//                         bookmarkId: bookmark._id,\n//                     }));\n//                     setMarkers(userBookmarks); // Set markers from the database\n//                     console.log(\"This I my Data: \", userBookmarks);\n//                 }\n//             })\n//             .catch((error) => {\n//                 console.error('Error fetching user data:', error);\n//             });\n//     }, [userId, token]);\n//\n//     useEffect(() => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\n//                 setMarkers([currentLocationMarker]);\n//             });\n//         }\n//\n//         fetchBookmarks();\n//     }, [userId, token]);\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//         setSelectedMarkerForDeletion(null);\n//         setIsDeleteMode(false); // Turn off Delete Mode when switching to Add Mode\n//     };\n//\n//     const toggleDeleteMode = () => {\n//         setIsDeleteMode(!isDeleteMode);\n//         setSelectedMarkerForDeletion(null); // Clear selected marker when entering Delete Mode\n//     };\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         if (isDeleteMode) {\n//             setSelectedMarkerForDeletion(marker); // Select marker for deletion\n//         } else {\n//             setActiveMarker(marker);\n//         }\n//     };\n//\n//     const deleteSelectedMarker = async () => {\n//         if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\n//             const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\n//             console.log('Bookmark ID:', bookmarkId);\n//\n//             try {\n//                 const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\n//                     method: 'DELETE',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                         Authorization: token,\n//                     },\n//                     body: JSON.stringify({bookmarkId}), // Send the bookmarkId in the request body\n//                 });\n//\n//                 if (response.status === 204) {\n//                     console.log('Bookmark deleted successfully');\n//                     setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\n//                     setSelectedMarkerForDeletion(null);\n//\n//                     // Close the InfoWindow programmatically\n//                     const closeButton = document.querySelector('.gm-ui-hover-effect'); // This class may vary depending on your Google Maps version\n//                     if (closeButton) {\n//                         closeButton.click();\n//                     }\n//                 } else {\n//                     console.error('Error deleting bookmark');\n//                 }\n//             } catch (error) {\n//                 console.error('Error:', error);\n//             }\n//         }\n//     };\n//\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers([...markers, {...bookmarkToSend, bookmarkId: response.data.bookmarkId}]);\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 {selectedMarkerForDeletion && (\n//                     <InfoWindow\n//                         position={{lat: selectedMarkerForDeletion.lat, lng: selectedMarkerForDeletion.lng}}\n//                         onCloseClick={() => setSelectedMarkerForDeletion(null)}\n//                     >\n//                         <div className=\"info-window-container\">\n//                             <div className=\"info-window-content\">\n//                                 <p>Do you want to delete this bookmark?</p>\n//                                 <div className=\"button-container\">\n//                                     <button className=\"button\" onClick={deleteSelectedMarker}>Yes, Delete</button>\n//                                     <button className=\"button\"\n//                                             onClick={() => setSelectedMarkerForDeletion(null)}>Cancel\n//                                     </button>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     </InfoWindow>\n//\n//\n//                 )}\n//\n//\n//                 <div className=\"buttons-container\">\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                     <button\n//                         className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\n//                         onClick={toggleDeleteMode}\n//                     >\n//                         {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport '../styles/components/GoogleMapStyle.css';\nimport SuccessMessage from './SuccessMessage'; // Import your SuccessMessage component\nimport FailedMessage from './FailedMessage'; // Import your FailedMessage component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100vh'\n};\nconst center = {\n  lat: 30.046981762780838,\n  lng: 31.237174094852456\n};\nfunction MyGoogleMap() {\n  _s();\n  const token = localStorage.getItem('authToken');\n  const userId = localStorage.getItem('userId');\n  const [markers, setMarkers] = useState([]);\n  const [activeMarker, setActiveMarker] = useState(null);\n  const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const fetchBookmarks = useCallback(() => {\n    fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      if (data.status.statusCode === 200) {\n        const userBookmarks = data.data.map(bookmark => ({\n          lat: bookmark.coordinates.latitude,\n          lng: bookmark.coordinates.longitude,\n          name: bookmark.name,\n          description: bookmark.description,\n          bookmarkId: bookmark._id\n        }));\n        setMarkers(userBookmarks);\n      }\n    }).catch(error => {\n      console.error('Error fetching user data:', error);\n    });\n  }, [userId, token]);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lng = position.coords.longitude;\n        const currentLocationMarker = {\n          lat,\n          lng,\n          name: 'Current Location',\n          description: 'You are here'\n        };\n        setMarkers([currentLocationMarker]);\n      });\n    }\n    fetchBookmarks();\n  }, [userId, token]);\n  const toggleBookmarkMode = () => {\n    setIsAddingBookmark(!isAddingBookmark);\n    setSelectedMarkerForDeletion(null);\n    setIsDeleteMode(false);\n  };\n  const toggleDeleteMode = () => {\n    setIsDeleteMode(!isDeleteMode);\n    setSelectedMarkerForDeletion(null);\n  };\n  const handleMapClick = event => {\n    if (isAddingBookmark) {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      const newMarker = {\n        lat,\n        lng,\n        name: '',\n        description: ''\n      };\n      setMarkers([...markers, newMarker]);\n    }\n  };\n  const handleMarkerClick = marker => {\n    if (isDeleteMode) {\n      setSelectedMarkerForDeletion(marker);\n    } else {\n      setActiveMarker(marker);\n    }\n  };\n  const deleteSelectedMarker = async () => {\n    if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\n      const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\n      console.log('Bookmark ID:', bookmarkId);\n      try {\n        const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: token\n          },\n          body: JSON.stringify({\n            bookmarkId\n          })\n        });\n        if (response.status === 204) {\n          console.log('Bookmark deleted successfully');\n          setMarkers(markers.filter(marker => marker !== selectedMarkerForDeletion));\n          setSelectedMarkerForDeletion(null);\n          const closeButton = document.querySelector('.gm-ui-hover-effect');\n          if (closeButton) {\n            closeButton.click();\n          }\n        } else {\n          console.error('Error deleting bookmark');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleNameChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      name: event.target.value\n    });\n  };\n  const handleDescriptionChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      description: event.target.value\n    });\n  };\n  const saveBookmark = async () => {\n    if (!activeMarker || !activeMarker.name) {\n      return;\n    }\n    const bookmarkToSend = {\n      userId,\n      name: activeMarker.name,\n      coordinates: {\n        latitude: activeMarker.lat,\n        longitude: activeMarker.lng\n      },\n      description: activeMarker.description\n    };\n    setIsLoading(true);\n    setSuccessMessage('');\n    setErrorMessage('');\n    try {\n      const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify(bookmarkToSend)\n      });\n      if (response.status === 201) {\n        console.log('Bookmark created successfully');\n        setMarkers([...markers, {\n          ...bookmarkToSend,\n          bookmarkId: response.data.bookmarkId\n        }]);\n        setActiveMarker(null);\n        setIsAddingBookmark(false);\n        setSuccessMessage('Bookmark added successfully.');\n      } else {\n        console.error('Error creating bookmark');\n        setErrorMessage('Error adding bookmark. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setErrorMessage('An error occurred. Please try again later.');\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 14,\n      onClick: handleMapClick,\n      children: [markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        onClick: () => handleMarkerClick(marker)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 21\n      }, this)), activeMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: activeMarker.lat,\n          lng: activeMarker.lng\n        },\n        onCloseClick: () => setActiveMarker(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-window-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Bookmark Name\",\n            value: activeMarker.name,\n            onChange: handleNameChange,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Bookmark Description\",\n            value: activeMarker.description,\n            onChange: handleDescriptionChange,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: saveBookmark,\n            children: \"Save Bookmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 21\n      }, this), selectedMarkerForDeletion && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selectedMarkerForDeletion.lat,\n          lng: selectedMarkerForDeletion.lng\n        },\n        onCloseClick: () => setSelectedMarkerForDeletion(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-window-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info-window-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Do you want to delete this bookmark?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"button\",\n                onClick: deleteSelectedMarker,\n                children: \"Yes, Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"button\",\n                onClick: () => setSelectedMarkerForDeletion(null),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 21\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 31\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(SuccessMessage, {\n        message: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 36\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(FailedMessage, {\n        message: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`,\n          onClick: toggleBookmarkMode,\n          children: isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`,\n          onClick: toggleDeleteMode,\n          children: isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 429,\n    columnNumber: 9\n  }, this);\n}\n_s(MyGoogleMap, \"04GC752TfXBS4CubU/Rl+BTCarg=\");\n_c = MyGoogleMap;\nexport default MyGoogleMap;\nvar _c;\n$RefreshReg$(_c, \"MyGoogleMap\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","LoadScript","Marker","InfoWindow","SuccessMessage","FailedMessage","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MyGoogleMap","_s","token","localStorage","getItem","userId","markers","setMarkers","activeMarker","setActiveMarker","isAddingBookmark","setIsAddingBookmark","isDeleteMode","setIsDeleteMode","selectedMarkerForDeletion","setSelectedMarkerForDeletion","isLoading","setIsLoading","successMessage","setSuccessMessage","errorMessage","setErrorMessage","fetchBookmarks","fetch","method","headers","then","response","json","data","status","statusCode","userBookmarks","map","bookmark","coordinates","latitude","longitude","name","description","bookmarkId","_id","catch","error","console","navigator","geolocation","getCurrentPosition","position","coords","currentLocationMarker","toggleBookmarkMode","toggleDeleteMode","handleMapClick","event","latLng","newMarker","handleMarkerClick","marker","deleteSelectedMarker","log","Authorization","body","JSON","stringify","filter","closeButton","document","querySelector","click","handleNameChange","target","value","handleDescriptionChange","saveBookmark","bookmarkToSend","googleMapsApiKey","children","mapContainerStyle","zoom","onClick","index","fileName","_jsxFileName","lineNumber","columnNumber","onCloseClick","className","type","placeholder","onChange","message","_c","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/components/GoogleMap.js"],"sourcesContent":["// import React, {useState, useEffect, useCallback} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//     const [isDeleteMode, setIsDeleteMode] = useState(false);\r\n//     const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\r\n//\r\n//\r\n//     const fetchBookmarks = useCallback(() => {\r\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n//             method: 'GET',\r\n//             headers: {\r\n//                 'Authorization': `${token}`,\r\n//             },\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((data) => {\r\n//                 if (data.status.statusCode === 200) {\r\n//                     const userBookmarks = data.data.map((bookmark) => ({\r\n//                         lat: bookmark.coordinates.latitude,\r\n//                         lng: bookmark.coordinates.longitude,\r\n//                         name: bookmark.name,\r\n//                         description: bookmark.description,\r\n//                         bookmarkId: bookmark._id,\r\n//                     }));\r\n//                     setMarkers(userBookmarks); // Set markers from the database\r\n//                     console.log(\"This I my Data: \", userBookmarks);\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.error('Error fetching user data:', error);\r\n//             });\r\n//     }, [userId, token]);\r\n//\r\n//     useEffect(() => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n//                 setMarkers([currentLocationMarker]);\r\n//             });\r\n//         }\r\n//\r\n//         fetchBookmarks();\r\n//     }, [userId, token]);\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//         setSelectedMarkerForDeletion(null);\r\n//         setIsDeleteMode(false); // Turn off Delete Mode when switching to Add Mode\r\n//     };\r\n//\r\n//     const toggleDeleteMode = () => {\r\n//         setIsDeleteMode(!isDeleteMode);\r\n//         setSelectedMarkerForDeletion(null); // Clear selected marker when entering Delete Mode\r\n//     };\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         if (isDeleteMode) {\r\n//             setSelectedMarkerForDeletion(marker); // Select marker for deletion\r\n//         } else {\r\n//             setActiveMarker(marker);\r\n//         }\r\n//     };\r\n//\r\n//     const deleteSelectedMarker = async () => {\r\n//         if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\r\n//             const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\r\n//             console.log('Bookmark ID:', bookmarkId);\r\n//\r\n//             try {\r\n//                 const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\r\n//                     method: 'DELETE',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                         Authorization: token,\r\n//                     },\r\n//                     body: JSON.stringify({bookmarkId}), // Send the bookmarkId in the request body\r\n//                 });\r\n//\r\n//                 if (response.status === 204) {\r\n//                     console.log('Bookmark deleted successfully');\r\n//                     setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\r\n//                     setSelectedMarkerForDeletion(null);\r\n//\r\n//                     // Close the InfoWindow programmatically\r\n//                     const closeButton = document.querySelector('.gm-ui-hover-effect'); // This class may vary depending on your Google Maps version\r\n//                     if (closeButton) {\r\n//                         closeButton.click();\r\n//                     }\r\n//                 } else {\r\n//                     console.error('Error deleting bookmark');\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Error:', error);\r\n//             }\r\n//         }\r\n//     };\r\n//\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers([...markers, {...bookmarkToSend, bookmarkId: response.data.bookmarkId}]);\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 {selectedMarkerForDeletion && (\r\n//                     <InfoWindow\r\n//                         position={{lat: selectedMarkerForDeletion.lat, lng: selectedMarkerForDeletion.lng}}\r\n//                         onCloseClick={() => setSelectedMarkerForDeletion(null)}\r\n//                     >\r\n//                         <div className=\"info-window-container\">\r\n//                             <div className=\"info-window-content\">\r\n//                                 <p>Do you want to delete this bookmark?</p>\r\n//                                 <div className=\"button-container\">\r\n//                                     <button className=\"button\" onClick={deleteSelectedMarker}>Yes, Delete</button>\r\n//                                     <button className=\"button\"\r\n//                                             onClick={() => setSelectedMarkerForDeletion(null)}>Cancel\r\n//                                     </button>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//\r\n//\r\n//                 )}\r\n//\r\n//\r\n//                 <div className=\"buttons-container\">\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                     <button\r\n//                         className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\r\n//                         onClick={toggleDeleteMode}\r\n//                     >\r\n//                         {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport '../styles/components/GoogleMapStyle.css';\r\nimport SuccessMessage from './SuccessMessage'; // Import your SuccessMessage component\r\nimport FailedMessage from './FailedMessage'; // Import your FailedMessage component\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '100vh',\r\n};\r\n\r\nconst center = {\r\n    lat: 30.046981762780838,\r\n    lng: 31.237174094852456,\r\n};\r\n\r\nfunction MyGoogleMap() {\r\n    const token = localStorage.getItem('authToken');\r\n    const userId = localStorage.getItem('userId');\r\n    const [markers, setMarkers] = useState([]);\r\n    const [activeMarker, setActiveMarker] = useState(null);\r\n    const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n    const [isDeleteMode, setIsDeleteMode] = useState(false);\r\n    const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const fetchBookmarks = useCallback(() => {\r\n        fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `${token}`,\r\n            },\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                if (data.status.statusCode === 200) {\r\n                    const userBookmarks = data.data.map((bookmark) => ({\r\n                        lat: bookmark.coordinates.latitude,\r\n                        lng: bookmark.coordinates.longitude,\r\n                        name: bookmark.name,\r\n                        description: bookmark.description,\r\n                        bookmarkId: bookmark._id,\r\n                    }));\r\n                    setMarkers(userBookmarks);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching user data:', error);\r\n            });\r\n    }, [userId, token]);\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lng = position.coords.longitude;\r\n                const currentLocationMarker = { lat, lng, name: 'Current Location', description: 'You are here' };\r\n                setMarkers([currentLocationMarker]);\r\n            });\r\n        }\r\n\r\n        fetchBookmarks();\r\n    }, [userId, token]);\r\n\r\n    const toggleBookmarkMode = () => {\r\n        setIsAddingBookmark(!isAddingBookmark);\r\n        setSelectedMarkerForDeletion(null);\r\n        setIsDeleteMode(false);\r\n    };\r\n\r\n    const toggleDeleteMode = () => {\r\n        setIsDeleteMode(!isDeleteMode);\r\n        setSelectedMarkerForDeletion(null);\r\n    };\r\n\r\n    const handleMapClick = (event) => {\r\n        if (isAddingBookmark) {\r\n            const lat = event.latLng.lat();\r\n            const lng = event.latLng.lng();\r\n            const newMarker = { lat, lng, name: '', description: '' };\r\n            setMarkers([...markers, newMarker]);\r\n        }\r\n    };\r\n\r\n    const handleMarkerClick = (marker) => {\r\n        if (isDeleteMode) {\r\n            setSelectedMarkerForDeletion(marker);\r\n        } else {\r\n            setActiveMarker(marker);\r\n        }\r\n    };\r\n\r\n    const deleteSelectedMarker = async () => {\r\n        if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\r\n            const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\r\n            console.log('Bookmark ID:', bookmarkId);\r\n\r\n            try {\r\n                const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\r\n                    method: 'DELETE',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: token,\r\n                    },\r\n                    body: JSON.stringify({ bookmarkId }),\r\n                });\r\n\r\n                if (response.status === 204) {\r\n                    console.log('Bookmark deleted successfully');\r\n                    setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\r\n                    setSelectedMarkerForDeletion(null);\r\n\r\n                    const closeButton = document.querySelector('.gm-ui-hover-effect');\r\n                    if (closeButton) {\r\n                        closeButton.click();\r\n                    }\r\n                } else {\r\n                    console.error('Error deleting bookmark');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleNameChange = (event) => {\r\n        setActiveMarker({ ...activeMarker, name: event.target.value });\r\n    };\r\n\r\n    const handleDescriptionChange = (event) => {\r\n        setActiveMarker({ ...activeMarker, description: event.target.value });\r\n    };\r\n\r\n    const saveBookmark = async () => {\r\n        if (!activeMarker || !activeMarker.name) {\r\n            return;\r\n        }\r\n\r\n        const bookmarkToSend = {\r\n            userId,\r\n            name: activeMarker.name,\r\n            coordinates: { latitude: activeMarker.lat, longitude: activeMarker.lng },\r\n            description: activeMarker.description,\r\n        };\r\n\r\n        setIsLoading(true);\r\n        setSuccessMessage('');\r\n        setErrorMessage('');\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: token,\r\n                },\r\n                body: JSON.stringify(bookmarkToSend),\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                console.log('Bookmark created successfully');\r\n                setMarkers([...markers, { ...bookmarkToSend, bookmarkId: response.data.bookmarkId }]);\r\n                setActiveMarker(null);\r\n                setIsAddingBookmark(false);\r\n                setSuccessMessage('Bookmark added successfully.');\r\n            } else {\r\n                console.error('Error creating bookmark');\r\n                setErrorMessage('Error adding bookmark. Please try again.');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            setErrorMessage('An error occurred. Please try again later.');\r\n        }\r\n\r\n        setIsLoading(false);\r\n    };\r\n\r\n    return (\r\n        <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n            <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n                {markers.map((marker, index) => (\r\n                    <Marker\r\n                        key={index}\r\n                        position={{ lat: marker.lat, lng: marker.lng }}\r\n                        onClick={() => handleMarkerClick(marker)}\r\n                    />\r\n                ))}\r\n\r\n                {activeMarker && (\r\n                    <InfoWindow\r\n                        position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\r\n                        onCloseClick={() => setActiveMarker(null)}\r\n                    >\r\n                        <div className=\"info-window-content\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Bookmark Name\"\r\n                                value={activeMarker.name}\r\n                                onChange={handleNameChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <textarea\r\n                                placeholder=\"Bookmark Description\"\r\n                                value={activeMarker.description}\r\n                                onChange={handleDescriptionChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <button className=\"save-button\" onClick={saveBookmark}>\r\n                                Save Bookmark\r\n                            </button>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                {selectedMarkerForDeletion && (\r\n                    <InfoWindow\r\n                        position={{ lat: selectedMarkerForDeletion.lat, lng: selectedMarkerForDeletion.lng }}\r\n                        onCloseClick={() => setSelectedMarkerForDeletion(null)}\r\n                    >\r\n                        <div className=\"info-window-container\">\r\n                            <div className=\"info-window-content\">\r\n                                <p>Do you want to delete this bookmark?</p>\r\n                                <div className=\"button-container\">\r\n                                    <button className=\"button\" onClick={deleteSelectedMarker}>\r\n                                        Yes, Delete\r\n                                    </button>\r\n                                    <button className=\"button\" onClick={() => setSelectedMarkerForDeletion(null)}>\r\n                                        Cancel\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                {isLoading && <p>Loading...</p>}\r\n                {successMessage && <SuccessMessage message={successMessage} />}\r\n                {errorMessage && <FailedMessage message={errorMessage} />}\r\n\r\n                <div className=\"buttons-container\">\r\n                    <button\r\n                        className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n                        onClick={toggleBookmarkMode}\r\n                    >\r\n                        {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n                    </button>\r\n                    <button\r\n                        className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\r\n                        onClick={toggleDeleteMode}\r\n                    >\r\n                        {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\r\n                    </button>\r\n                </div>\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n}\r\n\r\nexport default MyGoogleMap;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}