{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\components\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\n// import React, {useState} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '100vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId'); // Get userId from localStorage\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//\n//     const handleMapClick = (event) => {\n//         const lat = event.latLng.lat();\n//         const lng = event.latLng.lng();\n//         const newMarker = {lat, lng, name: '', description: ''};\n//         setMarkers([...markers, newMarker]);\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         setActiveMarker(marker);\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         // Replace 'your_user_id' with the actual user ID\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     'Authorization': token, // Include the authentication token\n//\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 // Bookmark created successfully\n//                 console.log('Bookmark created successfully');\n//                 setMarkers(\n//                     markers.map((marker) =>\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\n//                     )\n//                 );\n//                 setActiveMarker(null);\n//             } else {\n//                 // Handle errors or display an error message\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             // Handle network errors or other exceptions\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap\n//                 mapContainerStyle={containerStyle}\n//                 center={center}\n//                 zoom={14}\n//                 onClick={handleMapClick}\n//             >\n//                 {markers.map((marker, index) => (\n//                     <Marker\n//                         key={index}\n//                         position={{lat: marker.lat, lng: marker.lng}}\n//                         onClick={() => handleMarkerClick(marker)}\n//                     />\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div>\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                             />\n//                             <button onClick={saveBookmark}>Save Bookmark</button>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\n//\n//\nimport React, { useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport '../styles/components/GoogleMapStyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100vh'\n};\nconst center = {\n  lat: 30.046981762780838,\n  lng: 31.237174094852456\n};\nfunction MyGoogleMap() {\n  _s();\n  const token = localStorage.getItem('authToken');\n  const userId = localStorage.getItem('userId'); // Get userId from localStorage\n  const [markers, setMarkers] = useState([]);\n  const [activeMarker, setActiveMarker] = useState(null);\n  const [isAddingBookmark, setIsAddingBookmark] = useState(false); // Flag to indicate bookmark creation mode\n\n  const handleMapClick = event => {\n    if (isAddingBookmark) {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      const newMarker = {\n        lat,\n        lng,\n        name: '',\n        description: ''\n      };\n      setMarkers([...markers, newMarker]);\n    }\n  };\n  const handleMarkerClick = marker => {\n    setActiveMarker(marker);\n  };\n  const handleNameChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      name: event.target.value\n    });\n  };\n  const handleDescriptionChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      description: event.target.value\n    });\n  };\n  const toggleBookmarkMode = () => {\n    setIsAddingBookmark(!isAddingBookmark);\n  };\n  const saveBookmark = async () => {\n    if (!activeMarker || !activeMarker.name) {\n      return;\n    }\n\n    // Replace 'your_user_id' with the actual user ID\n\n    const bookmarkToSend = {\n      userId,\n      name: activeMarker.name,\n      coordinates: {\n        latitude: activeMarker.lat,\n        longitude: activeMarker.lng\n      },\n      description: activeMarker.description\n    };\n    try {\n      const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': token // Include the authentication token\n        },\n\n        body: JSON.stringify(bookmarkToSend)\n      });\n      if (response.status === 201) {\n        // Bookmark created successfully\n        console.log('Bookmark created successfully');\n        setMarkers(markers.map(marker => marker === activeMarker ? {\n          ...marker,\n          name: '',\n          description: ''\n        } : marker));\n        setActiveMarker(null);\n        setIsAddingBookmark(false); // Exit bookmark creation mode\n      } else {\n        // Handle errors or display an error message\n        console.error('Error creating bookmark');\n      }\n    } catch (error) {\n      // Handle network errors or other exceptions\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 14,\n      onClick: handleMapClick,\n      children: [markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        onClick: () => handleMarkerClick(marker)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }, this)), activeMarker &&\n      /*#__PURE__*/\n      // <InfoWindow\n      //     position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\n      //     onCloseClick={() => setActiveMarker(null)}\n      // >\n      //     <div>\n      //         <input\n      //             type=\"text\"\n      //             placeholder=\"Bookmark Name\"\n      //             value={activeMarker.name}\n      //             onChange={handleNameChange}\n      //         />\n      //         <textarea\n      //             placeholder=\"Bookmark Description\"\n      //             value={activeMarker.description}\n      //             onChange={handleDescriptionChange}\n      //         />\n      //         <button onClick={saveBookmark}>Save Bookmark</button>\n      //     </div>\n      // </InfoWindow>\n      // Inside the InfoWindow element\n      // Inside the InfoWindow element\n      _jsxDEV(InfoWindow, {\n        position: {\n          lat: activeMarker.lat,\n          lng: activeMarker.lng\n        },\n        onCloseClick: () => setActiveMarker(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-window-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Bookmark Name\",\n            value: activeMarker.name,\n            onChange: handleNameChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Bookmark Description\",\n            value: activeMarker.description,\n            onChange: handleDescriptionChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: saveBookmark,\n            children: \"Save Bookmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '10px',\n          left: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleBookmarkMode,\n          children: isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n}\n_s(MyGoogleMap, \"JeQjDfuRtjceVWESMkHp9hhY7ZI=\");\n_c = MyGoogleMap;\nexport default MyGoogleMap;\nvar _c;\n$RefreshReg$(_c, \"MyGoogleMap\");","map":{"version":3,"names":["React","useState","GoogleMap","LoadScript","Marker","InfoWindow","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MyGoogleMap","_s","token","localStorage","getItem","userId","markers","setMarkers","activeMarker","setActiveMarker","isAddingBookmark","setIsAddingBookmark","handleMapClick","event","latLng","newMarker","name","description","handleMarkerClick","marker","handleNameChange","target","value","handleDescriptionChange","toggleBookmarkMode","saveBookmark","bookmarkToSend","coordinates","latitude","longitude","response","fetch","method","headers","body","JSON","stringify","status","console","log","map","error","googleMapsApiKey","children","mapContainerStyle","zoom","onClick","index","position","fileName","_jsxFileName","lineNumber","columnNumber","onCloseClick","className","type","placeholder","onChange","style","top","left","_c","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/components/GoogleMap.js"],"sourcesContent":["// import React, {useState} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '100vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId'); // Get userId from localStorage\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         const lat = event.latLng.lat();\r\n//         const lng = event.latLng.lng();\r\n//         const newMarker = {lat, lng, name: '', description: ''};\r\n//         setMarkers([...markers, newMarker]);\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         setActiveMarker(marker);\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         // Replace 'your_user_id' with the actual user ID\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': token, // Include the authentication token\r\n//\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 // Bookmark created successfully\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers(\r\n//                     markers.map((marker) =>\r\n//                         marker === activeMarker ? {...marker, name: '', description: ''} : marker\r\n//                     )\r\n//                 );\r\n//                 setActiveMarker(null);\r\n//             } else {\r\n//                 // Handle errors or display an error message\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             // Handle network errors or other exceptions\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap\r\n//                 mapContainerStyle={containerStyle}\r\n//                 center={center}\r\n//                 zoom={14}\r\n//                 onClick={handleMapClick}\r\n//             >\r\n//                 {markers.map((marker, index) => (\r\n//                     <Marker\r\n//                         key={index}\r\n//                         position={{lat: marker.lat, lng: marker.lng}}\r\n//                         onClick={() => handleMarkerClick(marker)}\r\n//                     />\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div>\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                             />\r\n//                             <button onClick={saveBookmark}>Save Bookmark</button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\n//\r\n//\r\nimport React, { useState } from 'react';\r\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport '../styles/components/GoogleMapStyle.css'\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '100vh',\r\n};\r\n\r\nconst center = {\r\n    lat: 30.046981762780838,\r\n    lng: 31.237174094852456,\r\n};\r\n\r\nfunction MyGoogleMap() {\r\n    const token = localStorage.getItem('authToken');\r\n    const userId = localStorage.getItem('userId'); // Get userId from localStorage\r\n    const [markers, setMarkers] = useState([]);\r\n    const [activeMarker, setActiveMarker] = useState(null);\r\n    const [isAddingBookmark, setIsAddingBookmark] = useState(false); // Flag to indicate bookmark creation mode\r\n\r\n    const handleMapClick = (event) => {\r\n        if (isAddingBookmark) {\r\n            const lat = event.latLng.lat();\r\n            const lng = event.latLng.lng();\r\n            const newMarker = { lat, lng, name: '', description: '' };\r\n            setMarkers([...markers, newMarker]);\r\n        }\r\n    };\r\n\r\n    const handleMarkerClick = (marker) => {\r\n        setActiveMarker(marker);\r\n    };\r\n\r\n    const handleNameChange = (event) => {\r\n        setActiveMarker({ ...activeMarker, name: event.target.value });\r\n    };\r\n\r\n    const handleDescriptionChange = (event) => {\r\n        setActiveMarker({ ...activeMarker, description: event.target.value });\r\n    };\r\n\r\n    const toggleBookmarkMode = () => {\r\n        setIsAddingBookmark(!isAddingBookmark);\r\n    };\r\n\r\n    const saveBookmark = async () => {\r\n        if (!activeMarker || !activeMarker.name) {\r\n            return;\r\n        }\r\n\r\n        // Replace 'your_user_id' with the actual user ID\r\n\r\n        const bookmarkToSend = {\r\n            userId,\r\n            name: activeMarker.name,\r\n            coordinates: { latitude: activeMarker.lat, longitude: activeMarker.lng },\r\n            description: activeMarker.description,\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': token, // Include the authentication token\r\n                },\r\n                body: JSON.stringify(bookmarkToSend),\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                // Bookmark created successfully\r\n                console.log('Bookmark created successfully');\r\n                setMarkers(\r\n                    markers.map((marker) =>\r\n                        marker === activeMarker ? { ...marker, name: '', description: '' } : marker\r\n                    )\r\n                );\r\n                setActiveMarker(null);\r\n                setIsAddingBookmark(false); // Exit bookmark creation mode\r\n            } else {\r\n                // Handle errors or display an error message\r\n                console.error('Error creating bookmark');\r\n            }\r\n        } catch (error) {\r\n            // Handle network errors or other exceptions\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n            <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                center={center}\r\n                zoom={14}\r\n                onClick={handleMapClick}\r\n            >\r\n                {markers.map((marker, index) => (\r\n                    <Marker\r\n                        key={index}\r\n                        position={{ lat: marker.lat, lng: marker.lng }}\r\n                        onClick={() => handleMarkerClick(marker)}\r\n                    />\r\n                ))}\r\n\r\n                {activeMarker && (\r\n                    // <InfoWindow\r\n                    //     position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\r\n                    //     onCloseClick={() => setActiveMarker(null)}\r\n                    // >\r\n                    //     <div>\r\n                    //         <input\r\n                    //             type=\"text\"\r\n                    //             placeholder=\"Bookmark Name\"\r\n                    //             value={activeMarker.name}\r\n                    //             onChange={handleNameChange}\r\n                    //         />\r\n                    //         <textarea\r\n                    //             placeholder=\"Bookmark Description\"\r\n                    //             value={activeMarker.description}\r\n                    //             onChange={handleDescriptionChange}\r\n                    //         />\r\n                    //         <button onClick={saveBookmark}>Save Bookmark</button>\r\n                    //     </div>\r\n                    // </InfoWindow>\r\n                    // Inside the InfoWindow element\r\n                    // Inside the InfoWindow element\r\n                    <InfoWindow\r\n                        position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\r\n                        onCloseClick={() => setActiveMarker(null)}\r\n                    >\r\n                        <div className=\"info-window-content\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Bookmark Name\"\r\n                                value={activeMarker.name}\r\n                                onChange={handleNameChange}\r\n                            />\r\n                            <textarea\r\n                                placeholder=\"Bookmark Description\"\r\n                                value={activeMarker.description}\r\n                                onChange={handleDescriptionChange}\r\n                            />\r\n                            <button className=\"save-button\" onClick={saveBookmark}>\r\n                                Save Bookmark\r\n                            </button>\r\n                        </div>\r\n                    </InfoWindow>\r\n\r\n\r\n                )}\r\n\r\n                <div style={{ position: 'absolute', top: '10px', left: '10px' }}>\r\n                    <button onClick={toggleBookmarkMode}>\r\n                        {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n                    </button>\r\n                </div>\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n}\r\n\r\nexport default MyGoogleMap;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}