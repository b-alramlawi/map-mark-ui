{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\components\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport '../styles/components/GoogleMapStyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100vh'\n};\nconst center = {\n  lat: 30.046981762780838,\n  lng: 31.237174094852456\n};\nfunction MyGoogleMap() {\n  _s();\n  const token = localStorage.getItem('authToken');\n  const userId = localStorage.getItem('userId');\n  const [markers, setMarkers] = useState([]);\n  const [activeMarker, setActiveMarker] = useState(null);\n  const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\n  const [isInfoWindowOpen, setIsInfoWindowOpen] = useState(false);\n  const fetchBookmarks = useCallback(() => {\n    fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      if (data.status.statusCode === 200) {\n        const userBookmarks = data.data.map(bookmark => ({\n          lat: bookmark.coordinates.latitude,\n          lng: bookmark.coordinates.longitude,\n          name: bookmark.name,\n          description: bookmark.description,\n          bookmarkId: bookmark._id\n        }));\n        setMarkers(userBookmarks); // Set markers from the database\n        console.log(\"This I my Data: \", userBookmarks);\n      }\n    }).catch(error => {\n      console.error('Error fetching user data:', error);\n    });\n  }, [userId, token]);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lng = position.coords.longitude;\n        const currentLocationMarker = {\n          lat,\n          lng,\n          name: 'Current Location',\n          description: 'You are here'\n        };\n        setMarkers([currentLocationMarker]);\n      });\n    }\n    fetchBookmarks();\n  }, [userId, token]);\n  const toggleBookmarkMode = () => {\n    setIsAddingBookmark(!isAddingBookmark);\n    setSelectedMarkerForDeletion(null);\n    setIsDeleteMode(false); // Turn off Delete Mode when switching to Add Mode\n  };\n\n  const toggleDeleteMode = () => {\n    setIsDeleteMode(!isDeleteMode);\n    setSelectedMarkerForDeletion(null); // Clear selected marker when entering Delete Mode\n  };\n\n  const handleMapClick = event => {\n    if (isAddingBookmark) {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      const newMarker = {\n        lat,\n        lng,\n        name: '',\n        description: ''\n      };\n      setMarkers([...markers, newMarker]);\n    }\n  };\n  const handleMarkerClick = marker => {\n    if (isDeleteMode) {\n      setSelectedMarkerForDeletion(marker); // Select marker for deletion\n    } else {\n      setActiveMarker(marker);\n    }\n  };\n\n  // New deleteSelectedMarker function\n  // const deleteSelectedMarker = async () => {\n  //     if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\n  //         const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\n  //         console.log('Bookmark ID:', bookmarkId);\n  //\n  //\n  //         try {\n  //             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\n  //                 method: 'DELETE',\n  //                 headers: {\n  //                     'Content-Type': 'application/json',\n  //                     Authorization: token,\n  //                 },\n  //                 body: JSON.stringify({bookmarkId}), // Send the bookmarkId in the request body\n  //             });\n  //\n  //             if (response.status === 204) {\n  //                 console.log('Bookmark deleted successfully');\n  //                 setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\n  //                 setSelectedMarkerForDeletion(null);\n  //             } else {\n  //                 console.error('Error deleting bookmark');\n  //             }\n  //         } catch (error) {\n  //             console.error('Error:', error);\n  //         }\n  //     }\n  // };\n\n  // const deleteSelectedMarker = async () => {\n  //     if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\n  //         const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\n  //         console.log('Bookmark ID:', bookmarkId);\n  //\n  //         try {\n  //             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\n  //                 method: 'DELETE',\n  //                 headers: {\n  //                     'Content-Type': 'application/json',\n  //                     Authorization: token,\n  //                 },\n  //                 body: JSON.stringify({ bookmarkId }), // Send the bookmarkId in the request body\n  //             });\n  //\n  //             if (response.status === 204) {\n  //                 console.log('Bookmark deleted successfully');\n  //                 setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\n  //                 setSelectedMarkerForDeletion(null); // Clear selected marker after deletion\n  //             } else {\n  //                 console.error('Error deleting bookmark');\n  //             }\n  //         } catch (error) {\n  //             console.error('Error:', error);\n  //         }\n  //     }\n  // };\n\n  const deleteSelectedMarker = async () => {\n    if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\n      const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\n      console.log('Bookmark ID:', bookmarkId);\n      try {\n        const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: token\n          },\n          body: JSON.stringify({\n            bookmarkId\n          }) // Send the bookmarkId in the request body\n        });\n\n        if (response.status === 204) {\n          console.log('Bookmark deleted successfully');\n          setMarkers(markers.filter(marker => marker !== selectedMarkerForDeletion));\n          setSelectedMarkerForDeletion(null);\n\n          // Close the InfoWindow programmatically\n          const closeButton = document.querySelector('.gm-ui-hover-effect'); // This class may vary depending on your Google Maps version\n          if (closeButton) {\n            closeButton.click();\n          }\n        } else {\n          console.error('Error deleting bookmark');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleNameChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      name: event.target.value\n    });\n  };\n  const handleDescriptionChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      description: event.target.value\n    });\n  };\n  const saveBookmark = async () => {\n    if (!activeMarker || !activeMarker.name) {\n      return;\n    }\n    const bookmarkToSend = {\n      userId,\n      name: activeMarker.name,\n      coordinates: {\n        latitude: activeMarker.lat,\n        longitude: activeMarker.lng\n      },\n      description: activeMarker.description\n    };\n    try {\n      const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify(bookmarkToSend)\n      });\n      if (response.status === 201) {\n        console.log('Bookmark created successfully');\n        setMarkers([...markers, {\n          ...bookmarkToSend,\n          bookmarkId: response.data.bookmarkId\n        }]);\n        setActiveMarker(null);\n        setIsAddingBookmark(false);\n      } else {\n        console.error('Error creating bookmark');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 14,\n      onClick: handleMapClick,\n      children: [markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        onClick: () => handleMarkerClick(marker)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }, this)), activeMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: activeMarker.lat,\n          lng: activeMarker.lng\n        },\n        onCloseClick: () => setActiveMarker(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-window-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Bookmark Name\",\n            value: activeMarker.name,\n            onChange: handleNameChange,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Bookmark Description\",\n            value: activeMarker.description,\n            onChange: handleDescriptionChange,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: saveBookmark,\n            children: \"Save Bookmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }, this), selectedMarkerForDeletion && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selectedMarkerForDeletion.lat,\n          lng: selectedMarkerForDeletion.lng\n        },\n        onCloseClick: () => setSelectedMarkerForDeletion(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-window-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Do you want to delete this bookmark?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: deleteSelectedMarker,\n            children: \"Yes, Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedMarkerForDeletion(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`,\n          onClick: toggleBookmarkMode,\n          children: isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`,\n          onClick: toggleDeleteMode,\n          children: isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 9\n  }, this);\n}\n_s(MyGoogleMap, \"XFL1/zfSVlyrTucLWlXiVi4a1W0=\");\n_c = MyGoogleMap;\nexport default MyGoogleMap;\nvar _c;\n$RefreshReg$(_c, \"MyGoogleMap\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","LoadScript","Marker","InfoWindow","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MyGoogleMap","_s","token","localStorage","getItem","userId","markers","setMarkers","activeMarker","setActiveMarker","isAddingBookmark","setIsAddingBookmark","isDeleteMode","setIsDeleteMode","selectedMarkerForDeletion","setSelectedMarkerForDeletion","isInfoWindowOpen","setIsInfoWindowOpen","fetchBookmarks","fetch","method","headers","then","response","json","data","status","statusCode","userBookmarks","map","bookmark","coordinates","latitude","longitude","name","description","bookmarkId","_id","console","log","catch","error","navigator","geolocation","getCurrentPosition","position","coords","currentLocationMarker","toggleBookmarkMode","toggleDeleteMode","handleMapClick","event","latLng","newMarker","handleMarkerClick","marker","deleteSelectedMarker","Authorization","body","JSON","stringify","filter","closeButton","document","querySelector","click","handleNameChange","target","value","handleDescriptionChange","saveBookmark","bookmarkToSend","googleMapsApiKey","children","mapContainerStyle","zoom","onClick","index","fileName","_jsxFileName","lineNumber","columnNumber","onCloseClick","className","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/components/GoogleMap.js"],"sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\r\nimport {GoogleMap, LoadScript, Marker, InfoWindow} from '@react-google-maps/api';\r\nimport '../styles/components/GoogleMapStyle.css';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '100vh',\r\n};\r\n\r\nconst center = {\r\n    lat: 30.046981762780838,\r\n    lng: 31.237174094852456,\r\n};\r\n\r\nfunction MyGoogleMap() {\r\n    const token = localStorage.getItem('authToken');\r\n    const userId = localStorage.getItem('userId');\r\n    const [markers, setMarkers] = useState([]);\r\n    const [activeMarker, setActiveMarker] = useState(null);\r\n    const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n    const [isDeleteMode, setIsDeleteMode] = useState(false);\r\n    const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\r\n    const [isInfoWindowOpen, setIsInfoWindowOpen] = useState(false);\r\n\r\n\r\n    const fetchBookmarks = useCallback(() => {\r\n        fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `${token}`,\r\n            },\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                if (data.status.statusCode === 200) {\r\n                    const userBookmarks = data.data.map((bookmark) => ({\r\n                        lat: bookmark.coordinates.latitude,\r\n                        lng: bookmark.coordinates.longitude,\r\n                        name: bookmark.name,\r\n                        description: bookmark.description,\r\n                        bookmarkId: bookmark._id,\r\n                    }));\r\n                    setMarkers(userBookmarks); // Set markers from the database\r\n                    console.log(\"This I my Data: \", userBookmarks);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching user data:', error);\r\n            });\r\n    }, [userId, token]);\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lng = position.coords.longitude;\r\n                const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n                setMarkers([currentLocationMarker]);\r\n            });\r\n        }\r\n\r\n        fetchBookmarks();\r\n    }, [userId, token]);\r\n\r\n    const toggleBookmarkMode = () => {\r\n        setIsAddingBookmark(!isAddingBookmark);\r\n        setSelectedMarkerForDeletion(null);\r\n        setIsDeleteMode(false); // Turn off Delete Mode when switching to Add Mode\r\n    };\r\n\r\n    const toggleDeleteMode = () => {\r\n        setIsDeleteMode(!isDeleteMode);\r\n        setSelectedMarkerForDeletion(null); // Clear selected marker when entering Delete Mode\r\n    };\r\n\r\n    const handleMapClick = (event) => {\r\n        if (isAddingBookmark) {\r\n            const lat = event.latLng.lat();\r\n            const lng = event.latLng.lng();\r\n            const newMarker = {lat, lng, name: '', description: ''};\r\n            setMarkers([...markers, newMarker]);\r\n        }\r\n    };\r\n\r\n    const handleMarkerClick = (marker) => {\r\n        if (isDeleteMode) {\r\n            setSelectedMarkerForDeletion(marker); // Select marker for deletion\r\n        } else {\r\n            setActiveMarker(marker);\r\n        }\r\n    };\r\n\r\n    // New deleteSelectedMarker function\r\n    // const deleteSelectedMarker = async () => {\r\n    //     if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\r\n    //         const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\r\n    //         console.log('Bookmark ID:', bookmarkId);\r\n    //\r\n    //\r\n    //         try {\r\n    //             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\r\n    //                 method: 'DELETE',\r\n    //                 headers: {\r\n    //                     'Content-Type': 'application/json',\r\n    //                     Authorization: token,\r\n    //                 },\r\n    //                 body: JSON.stringify({bookmarkId}), // Send the bookmarkId in the request body\r\n    //             });\r\n    //\r\n    //             if (response.status === 204) {\r\n    //                 console.log('Bookmark deleted successfully');\r\n    //                 setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\r\n    //                 setSelectedMarkerForDeletion(null);\r\n    //             } else {\r\n    //                 console.error('Error deleting bookmark');\r\n    //             }\r\n    //         } catch (error) {\r\n    //             console.error('Error:', error);\r\n    //         }\r\n    //     }\r\n    // };\r\n\r\n    // const deleteSelectedMarker = async () => {\r\n    //     if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\r\n    //         const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\r\n    //         console.log('Bookmark ID:', bookmarkId);\r\n    //\r\n    //         try {\r\n    //             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\r\n    //                 method: 'DELETE',\r\n    //                 headers: {\r\n    //                     'Content-Type': 'application/json',\r\n    //                     Authorization: token,\r\n    //                 },\r\n    //                 body: JSON.stringify({ bookmarkId }), // Send the bookmarkId in the request body\r\n    //             });\r\n    //\r\n    //             if (response.status === 204) {\r\n    //                 console.log('Bookmark deleted successfully');\r\n    //                 setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\r\n    //                 setSelectedMarkerForDeletion(null); // Clear selected marker after deletion\r\n    //             } else {\r\n    //                 console.error('Error deleting bookmark');\r\n    //             }\r\n    //         } catch (error) {\r\n    //             console.error('Error:', error);\r\n    //         }\r\n    //     }\r\n    // };\r\n\r\n    const deleteSelectedMarker = async () => {\r\n        if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\r\n            const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\r\n            console.log('Bookmark ID:', bookmarkId);\r\n\r\n            try {\r\n                const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\r\n                    method: 'DELETE',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: token,\r\n                    },\r\n                    body: JSON.stringify({ bookmarkId }), // Send the bookmarkId in the request body\r\n                });\r\n\r\n                if (response.status === 204) {\r\n                    console.log('Bookmark deleted successfully');\r\n                    setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\r\n                    setSelectedMarkerForDeletion(null);\r\n\r\n                    // Close the InfoWindow programmatically\r\n                    const closeButton = document.querySelector('.gm-ui-hover-effect'); // This class may vary depending on your Google Maps version\r\n                    if (closeButton) {\r\n                        closeButton.click();\r\n                    }\r\n                } else {\r\n                    console.error('Error deleting bookmark');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const handleNameChange = (event) => {\r\n        setActiveMarker({...activeMarker, name: event.target.value});\r\n    };\r\n\r\n    const handleDescriptionChange = (event) => {\r\n        setActiveMarker({...activeMarker, description: event.target.value});\r\n    };\r\n\r\n    const saveBookmark = async () => {\r\n        if (!activeMarker || !activeMarker.name) {\r\n            return;\r\n        }\r\n\r\n        const bookmarkToSend = {\r\n            userId,\r\n            name: activeMarker.name,\r\n            coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n            description: activeMarker.description,\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: token,\r\n                },\r\n                body: JSON.stringify(bookmarkToSend),\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                console.log('Bookmark created successfully');\r\n                setMarkers([...markers, {...bookmarkToSend, bookmarkId: response.data.bookmarkId}]);\r\n                setActiveMarker(null);\r\n                setIsAddingBookmark(false);\r\n            } else {\r\n                console.error('Error creating bookmark');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n            <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n                {markers.map((marker, index) => (\r\n                    <Marker\r\n                        key={index}\r\n                        position={{lat: marker.lat, lng: marker.lng}}\r\n                        onClick={() => handleMarkerClick(marker)}\r\n                    />\r\n                ))}\r\n\r\n                {activeMarker && (\r\n                    <InfoWindow\r\n                        position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n                        onCloseClick={() => setActiveMarker(null)}\r\n                    >\r\n                        <div className=\"info-window-content\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Bookmark Name\"\r\n                                value={activeMarker.name}\r\n                                onChange={handleNameChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <textarea\r\n                                placeholder=\"Bookmark Description\"\r\n                                value={activeMarker.description}\r\n                                onChange={handleDescriptionChange}\r\n                                className=\"input-field\"\r\n                            />\r\n                            <button className=\"save-button\" onClick={saveBookmark}>\r\n                                Save Bookmark\r\n                            </button>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                {selectedMarkerForDeletion && (\r\n                    <InfoWindow\r\n                        position={{ lat: selectedMarkerForDeletion.lat, lng: selectedMarkerForDeletion.lng }}\r\n                        onCloseClick={() => setSelectedMarkerForDeletion(null)}\r\n                    >\r\n                        <div className=\"info-window-content\">\r\n                            <p>Do you want to delete this bookmark?</p>\r\n                            <button onClick={deleteSelectedMarker}>Yes, Delete</button>\r\n                            <button onClick={() => setSelectedMarkerForDeletion(null)}>Cancel</button>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n\r\n                <div className=\"buttons-container\">\r\n                    <button\r\n                        className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n                        onClick={toggleBookmarkMode}\r\n                    >\r\n                        {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n                    </button>\r\n                    <button\r\n                        className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\r\n                        onClick={toggleDeleteMode}\r\n                    >\r\n                        {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\r\n                    </button>\r\n                </div>\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n}\r\n\r\nexport default MyGoogleMap;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAO,OAAO;AAC7D,SAAQC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,UAAU,QAAO,wBAAwB;AAChF,OAAO,yCAAyC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,cAAc,GAAG;EACnBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,MAAM,GAAG;EACXC,GAAG,EAAE,kBAAkB;EACvBC,GAAG,EAAE;AACT,CAAC;AAED,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,MAAMC,MAAM,GAAGF,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC7C,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACyB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC6B,yBAAyB,EAAEC,4BAA4B,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAChF,MAAM,CAAC+B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EAG/D,MAAMiC,cAAc,GAAG/B,WAAW,CAAC,MAAM;IACrCgC,KAAK,CAAE,4CAA2Cd,MAAO,EAAC,EAAE;MACxDe,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,eAAe,EAAG,GAAEnB,KAAM;MAC9B;IACJ,CAAC,CAAC,CACGoB,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACZ,IAAIA,IAAI,CAACC,MAAM,CAACC,UAAU,KAAK,GAAG,EAAE;QAChC,MAAMC,aAAa,GAAGH,IAAI,CAACA,IAAI,CAACI,GAAG,CAAEC,QAAQ,KAAM;UAC/ChC,GAAG,EAAEgC,QAAQ,CAACC,WAAW,CAACC,QAAQ;UAClCjC,GAAG,EAAE+B,QAAQ,CAACC,WAAW,CAACE,SAAS;UACnCC,IAAI,EAAEJ,QAAQ,CAACI,IAAI;UACnBC,WAAW,EAAEL,QAAQ,CAACK,WAAW;UACjCC,UAAU,EAAEN,QAAQ,CAACO;QACzB,CAAC,CAAC,CAAC;QACH9B,UAAU,CAACqB,aAAa,CAAC,CAAC,CAAC;QAC3BU,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEX,aAAa,CAAC;MAClD;IACJ,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAK;MACdH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACrD,CAAC,CAAC;EACV,CAAC,EAAE,CAACpC,MAAM,EAAEH,KAAK,CAAC,CAAC;EAEnBhB,SAAS,CAAC,MAAM;IACZ,IAAIwD,SAAS,CAACC,WAAW,EAAE;MACvBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAK;QACnD,MAAM/C,GAAG,GAAG+C,QAAQ,CAACC,MAAM,CAACd,QAAQ;QACpC,MAAMjC,GAAG,GAAG8C,QAAQ,CAACC,MAAM,CAACb,SAAS;QACrC,MAAMc,qBAAqB,GAAG;UAACjD,GAAG;UAAEC,GAAG;UAAEmC,IAAI,EAAE,kBAAkB;UAAEC,WAAW,EAAE;QAAc,CAAC;QAC/F5B,UAAU,CAAC,CAACwC,qBAAqB,CAAC,CAAC;MACvC,CAAC,CAAC;IACN;IAEA7B,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACb,MAAM,EAAEH,KAAK,CAAC,CAAC;EAEnB,MAAM8C,kBAAkB,GAAGA,CAAA,KAAM;IAC7BrC,mBAAmB,CAAC,CAACD,gBAAgB,CAAC;IACtCK,4BAA4B,CAAC,IAAI,CAAC;IAClCF,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;EAC5B,CAAC;;EAED,MAAMoC,gBAAgB,GAAGA,CAAA,KAAM;IAC3BpC,eAAe,CAAC,CAACD,YAAY,CAAC;IAC9BG,4BAA4B,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,CAAC;;EAED,MAAMmC,cAAc,GAAIC,KAAK,IAAK;IAC9B,IAAIzC,gBAAgB,EAAE;MAClB,MAAMZ,GAAG,GAAGqD,KAAK,CAACC,MAAM,CAACtD,GAAG,CAAC,CAAC;MAC9B,MAAMC,GAAG,GAAGoD,KAAK,CAACC,MAAM,CAACrD,GAAG,CAAC,CAAC;MAC9B,MAAMsD,SAAS,GAAG;QAACvD,GAAG;QAAEC,GAAG;QAAEmC,IAAI,EAAE,EAAE;QAAEC,WAAW,EAAE;MAAE,CAAC;MACvD5B,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAE+C,SAAS,CAAC,CAAC;IACvC;EACJ,CAAC;EAED,MAAMC,iBAAiB,GAAIC,MAAM,IAAK;IAClC,IAAI3C,YAAY,EAAE;MACdG,4BAA4B,CAACwC,MAAM,CAAC,CAAC,CAAC;IAC1C,CAAC,MAAM;MACH9C,eAAe,CAAC8C,MAAM,CAAC;IAC3B;EACJ,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI1C,yBAAyB,IAAIA,yBAAyB,CAACsB,UAAU,EAAE;MACnE,MAAMA,UAAU,GAAGtB,yBAAyB,CAAC,YAAY,CAAC;MAC1DwB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,UAAU,CAAC;MAEvC,IAAI;QACA,MAAMb,QAAQ,GAAG,MAAMJ,KAAK,CAAE,4CAA2Cd,MAAO,IAAG+B,UAAW,SAAQ,EAAE;UACpGhB,MAAM,EAAE,QAAQ;UAChBC,OAAO,EAAE;YACL,cAAc,EAAE,kBAAkB;YAClCoC,aAAa,EAAEvD;UACnB,CAAC;UACDwD,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAExB;UAAW,CAAC,CAAC,CAAE;QAC1C,CAAC,CAAC;;QAEF,IAAIb,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;UACzBY,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;UAC5ChC,UAAU,CAACD,OAAO,CAACuD,MAAM,CAAEN,MAAM,IAAKA,MAAM,KAAKzC,yBAAyB,CAAC,CAAC;UAC5EC,4BAA4B,CAAC,IAAI,CAAC;;UAElC;UACA,MAAM+C,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAC,qBAAqB,CAAC,CAAC,CAAC;UACnE,IAAIF,WAAW,EAAE;YACbA,WAAW,CAACG,KAAK,CAAC,CAAC;UACvB;QACJ,CAAC,MAAM;UACH3B,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAClC;IACJ;EACJ,CAAC;EAGD,MAAMyB,gBAAgB,GAAIf,KAAK,IAAK;IAChC1C,eAAe,CAAC;MAAC,GAAGD,YAAY;MAAE0B,IAAI,EAAEiB,KAAK,CAACgB,MAAM,CAACC;IAAK,CAAC,CAAC;EAChE,CAAC;EAED,MAAMC,uBAAuB,GAAIlB,KAAK,IAAK;IACvC1C,eAAe,CAAC;MAAC,GAAGD,YAAY;MAAE2B,WAAW,EAAEgB,KAAK,CAACgB,MAAM,CAACC;IAAK,CAAC,CAAC;EACvE,CAAC;EAED,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAAC9D,YAAY,IAAI,CAACA,YAAY,CAAC0B,IAAI,EAAE;MACrC;IACJ;IAEA,MAAMqC,cAAc,GAAG;MACnBlE,MAAM;MACN6B,IAAI,EAAE1B,YAAY,CAAC0B,IAAI;MACvBH,WAAW,EAAE;QAACC,QAAQ,EAAExB,YAAY,CAACV,GAAG;QAAEmC,SAAS,EAAEzB,YAAY,CAACT;MAAG,CAAC;MACtEoC,WAAW,EAAE3B,YAAY,CAAC2B;IAC9B,CAAC;IAED,IAAI;MACA,MAAMZ,QAAQ,GAAG,MAAMJ,KAAK,CAAE,4CAA2Cd,MAAO,MAAK,EAAE;QACnFe,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCoC,aAAa,EAAEvD;QACnB,CAAC;QACDwD,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACW,cAAc;MACvC,CAAC,CAAC;MAEF,IAAIhD,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QACzBY,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5ChC,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAE;UAAC,GAAGiE,cAAc;UAAEnC,UAAU,EAAEb,QAAQ,CAACE,IAAI,CAACW;QAAU,CAAC,CAAC,CAAC;QACnF3B,eAAe,CAAC,IAAI,CAAC;QACrBE,mBAAmB,CAAC,KAAK,CAAC;MAC9B,CAAC,MAAM;QACH2B,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAC;MAC5C;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,oBACIhD,OAAA,CAACJ,UAAU;IAACmF,gBAAgB,EAAC,yCAAyC;IAAAC,QAAA,eAClEhF,OAAA,CAACL,SAAS;MAACsF,iBAAiB,EAAEhF,cAAe;MAACG,MAAM,EAAEA,MAAO;MAAC8E,IAAI,EAAE,EAAG;MAACC,OAAO,EAAE1B,cAAe;MAAAuB,QAAA,GAC3FnE,OAAO,CAACuB,GAAG,CAAC,CAAC0B,MAAM,EAAEsB,KAAK,kBACvBpF,OAAA,CAACH,MAAM;QAEHuD,QAAQ,EAAE;UAAC/C,GAAG,EAAEyD,MAAM,CAACzD,GAAG;UAAEC,GAAG,EAAEwD,MAAM,CAACxD;QAAG,CAAE;QAC7C6E,OAAO,EAAEA,CAAA,KAAMtB,iBAAiB,CAACC,MAAM;MAAE,GAFpCsB,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CACJ,CAAC,EAEDzE,YAAY,iBACTf,OAAA,CAACF,UAAU;QACPsD,QAAQ,EAAE;UAAC/C,GAAG,EAAEU,YAAY,CAACV,GAAG;UAAEC,GAAG,EAAES,YAAY,CAACT;QAAG,CAAE;QACzDmF,YAAY,EAAEA,CAAA,KAAMzE,eAAe,CAAC,IAAI,CAAE;QAAAgE,QAAA,eAE1ChF,OAAA;UAAK0F,SAAS,EAAC,qBAAqB;UAAAV,QAAA,gBAChChF,OAAA;YACI2F,IAAI,EAAC,MAAM;YACXC,WAAW,EAAC,eAAe;YAC3BjB,KAAK,EAAE5D,YAAY,CAAC0B,IAAK;YACzBoD,QAAQ,EAAEpB,gBAAiB;YAC3BiB,SAAS,EAAC;UAAa;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACFxF,OAAA;YACI4F,WAAW,EAAC,sBAAsB;YAClCjB,KAAK,EAAE5D,YAAY,CAAC2B,WAAY;YAChCmD,QAAQ,EAAEjB,uBAAwB;YAClCc,SAAS,EAAC;UAAa;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACFxF,OAAA;YAAQ0F,SAAS,EAAC,aAAa;YAACP,OAAO,EAAEN,YAAa;YAAAG,QAAA,EAAC;UAEvD;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CACf,EAEAnE,yBAAyB,iBACtBrB,OAAA,CAACF,UAAU;QACPsD,QAAQ,EAAE;UAAE/C,GAAG,EAAEgB,yBAAyB,CAAChB,GAAG;UAAEC,GAAG,EAAEe,yBAAyB,CAACf;QAAI,CAAE;QACrFmF,YAAY,EAAEA,CAAA,KAAMnE,4BAA4B,CAAC,IAAI,CAAE;QAAA0D,QAAA,eAEvDhF,OAAA;UAAK0F,SAAS,EAAC,qBAAqB;UAAAV,QAAA,gBAChChF,OAAA;YAAAgF,QAAA,EAAG;UAAoC;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAC3CxF,OAAA;YAAQmF,OAAO,EAAEpB,oBAAqB;YAAAiB,QAAA,EAAC;UAAW;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC3DxF,OAAA;YAAQmF,OAAO,EAAEA,CAAA,KAAM7D,4BAA4B,CAAC,IAAI,CAAE;YAAA0D,QAAA,EAAC;UAAM;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CACf,eAGDxF,OAAA;QAAK0F,SAAS,EAAC,mBAAmB;QAAAV,QAAA,gBAC9BhF,OAAA;UACI0F,SAAS,EAAG,uBAAsBzE,gBAAgB,GAAG,QAAQ,GAAG,EAAG,EAAE;UACrEkE,OAAO,EAAE5B,kBAAmB;UAAAyB,QAAA,EAE3B/D,gBAAgB,GAAG,iBAAiB,GAAG;QAAc;UAAAoE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CAAC,eACTxF,OAAA;UACI0F,SAAS,EAAG,0BAAyBvE,YAAY,GAAG,UAAU,GAAG,EAAG,EAAE;UACtEgE,OAAO,EAAE3B,gBAAiB;UAAAwB,QAAA,EAEzB7D,YAAY,GAAG,eAAe,GAAG;QAAiB;UAAAkE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAErB;AAAChF,EAAA,CA1RQD,WAAW;AAAAuF,EAAA,GAAXvF,WAAW;AA4RpB,eAAeA,WAAW;AAAC,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}