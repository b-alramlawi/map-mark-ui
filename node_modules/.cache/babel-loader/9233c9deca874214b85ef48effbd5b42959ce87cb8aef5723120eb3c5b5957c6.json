{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\NodeJSProjects\\\\map-mark-ui\\\\src\\\\components\\\\GoogleMap.js\",\n  _s = $RefreshSig$();\n// // export default MyGoogleMap;\n// import React, {useState, useEffect, useCallback} from 'react';\n// import {GoogleMap, LoadScript, Marker, InfoWindow, Circle} from '@react-google-maps/api';\n// import '../styles/components/GoogleMapStyle.css';\n//\n// const containerStyle = {\n//     width: '100%',\n//     height: '90vh',\n// };\n//\n// const center = {\n//     lat: 30.046981762780838,\n//     lng: 31.237174094852456,\n// };\n//\n// function MyGoogleMap() {\n//     const token = localStorage.getItem('authToken');\n//     const userId = localStorage.getItem('userId');\n//     const [markers, setMarkers] = useState([]);\n//     const [activeMarker, setActiveMarker] = useState(null);\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n//     const [isDeleteMode, setIsDeleteMode] = useState(false);\n//     const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\n//\n//     const fetchBookmarks = useCallback(() => {\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n//             method: 'GET',\n//             headers: {\n//                 'Authorization': `${token}`,\n//             },\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 if (data.status.statusCode === 200) {\n//                     const userBookmarks = data.data.map((bookmark) => ({\n//                         lat: bookmark.coordinates.latitude,\n//                         lng: bookmark.coordinates.longitude,\n//                         name: bookmark.name,\n//                         description: bookmark.description,\n//                         bookmarkId: bookmark._id,\n//                     }));\n//                     setMarkers(userBookmarks); // Set markers from the database\n//                     console.log(\"This I my Data: \", userBookmarks);\n//                 }\n//             })\n//             .catch((error) => {\n//                 console.error('Error fetching user data:', error);\n//             });\n//     }, [userId, token]);\n//\n//     useEffect(() => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition((position) => {\n//                 const lat = position.coords.latitude;\n//                 const lng = position.coords.longitude;\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\n//                 setMarkers([currentLocationMarker]);\n//             });\n//         }\n//\n//         fetchBookmarks();\n//     }, [userId, token]);\n//\n//     const toggleBookmarkMode = () => {\n//         setIsAddingBookmark(!isAddingBookmark);\n//         setSelectedMarkerForDeletion(null);\n//         setIsDeleteMode(false); // Turn off Delete Mode when switching to Add Mode\n//     };\n//\n//     const toggleDeleteMode = () => {\n//         setIsDeleteMode(!isDeleteMode);\n//         setSelectedMarkerForDeletion(null); // Clear selected marker when entering Delete Mode\n//     };\n//\n//     const handleMapClick = (event) => {\n//         if (isAddingBookmark) {\n//             const lat = event.latLng.lat();\n//             const lng = event.latLng.lng();\n//             const newMarker = {lat, lng, name: '', description: ''};\n//             setMarkers([...markers, newMarker]);\n//         }\n//     };\n//\n//     const handleMarkerClick = (marker) => {\n//         if (isDeleteMode) {\n//             setSelectedMarkerForDeletion(marker); // Select marker for deletion\n//         } else {\n//             setActiveMarker(marker);\n//         }\n//     };\n//\n//     const deleteSelectedMarker = async () => {\n//         if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\n//             const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\n//             console.log('Bookmark ID:', bookmarkId);\n//\n//             try {\n//                 const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\n//                     method: 'DELETE',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                         Authorization: token,\n//                     },\n//                     body: JSON.stringify({bookmarkId}), // Send the bookmarkId in the request body\n//                 });\n//\n//                 if (response.status === 204) {\n//                     console.log('Bookmark deleted successfully');\n//                     setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\n//                     setSelectedMarkerForDeletion(null);\n//\n//                     // Close the InfoWindow programmatically\n//                     const closeButton = document.querySelector('.gm-ui-hover-effect'); // This class may vary depending on your Google Maps version\n//                     if (closeButton) {\n//                         closeButton.click();\n//                     }\n//                 } else {\n//                     console.error('Error deleting bookmark');\n//                 }\n//             } catch (error) {\n//                 console.error('Error:', error);\n//             }\n//         }\n//     };\n//\n//     const handleNameChange = (event) => {\n//         setActiveMarker({...activeMarker, name: event.target.value});\n//     };\n//\n//     const handleDescriptionChange = (event) => {\n//         setActiveMarker({...activeMarker, description: event.target.value});\n//     };\n//\n//     const saveBookmark = async () => {\n//         if (!activeMarker || !activeMarker.name) {\n//             return;\n//         }\n//\n//         const bookmarkToSend = {\n//             userId,\n//             name: activeMarker.name,\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\n//             description: activeMarker.description,\n//         };\n//\n//         try {\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                     Authorization: token,\n//                 },\n//                 body: JSON.stringify(bookmarkToSend),\n//             });\n//\n//             if (response.status === 201) {\n//                 console.log('Bookmark created successfully');\n//                 setMarkers([...markers, {...bookmarkToSend, bookmarkId: response.data.bookmarkId}]);\n//                 setActiveMarker(null);\n//                 setIsAddingBookmark(false);\n//             } else {\n//                 console.error('Error creating bookmark');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//\n//     return (\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\n//                 {markers.map((marker, index) => (\n//                     <React.Fragment key={index}>\n//                         <Marker\n//                             position={{lat: marker.lat, lng: marker.lng}}\n//                             onClick={() => handleMarkerClick(marker)}\n//                         />\n//                         <Circle\n//                             center={{lat: marker.lat, lng: marker.lng}}\n//                             radius={1000} // Adjust the radius as needed\n//                             options={{\n//                                 fillColor: 'rgba(0, 0, 255, 0.2)', // Circle fill color\n//                                 strokeColor: 'blue', // Circle border color\n//                                 strokeOpacity: 0.8,\n//                                 strokeWeight: 2,\n//                             }}\n//                         />\n//                     </React.Fragment>\n//                 ))}\n//\n//                 {activeMarker && (\n//                     <InfoWindow\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\n//                         onCloseClick={() => setActiveMarker(null)}\n//                     >\n//                         <div className=\"info-window-content\">\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Bookmark Name\"\n//                                 value={activeMarker.name}\n//                                 onChange={handleNameChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <textarea\n//                                 placeholder=\"Bookmark Description\"\n//                                 value={activeMarker.description}\n//                                 onChange={handleDescriptionChange}\n//                                 className=\"input-field\"\n//                             />\n//                             <button className=\"save-button\" onClick={saveBookmark}>\n//                                 Save Bookmark\n//                             </button>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 {selectedMarkerForDeletion && (\n//                     <InfoWindow\n//                         position={{lat: selectedMarkerForDeletion.lat, lng: selectedMarkerForDeletion.lng}}\n//                         onCloseClick={() => setSelectedMarkerForDeletion(null)}\n//                     >\n//                         <div className=\"info-window-container\">\n//                             <div className=\"info-window-content\">\n//                                 <p>Do you want to delete this bookmark?</p>\n//                                 <div className=\"button-container\">\n//                                     <button className=\"button\" onClick={deleteSelectedMarker}>Yes, Delete</button>\n//                                     <button className=\"button\"\n//                                             onClick={() => setSelectedMarkerForDeletion(null)}>Cancel\n//                                     </button>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     </InfoWindow>\n//                 )}\n//\n//                 <div className=\"buttons-container\">\n//                     <button\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\n//                         onClick={toggleBookmarkMode}\n//                     >\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\n//                     </button>\n//                     <button\n//                         className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\n//                         onClick={toggleDeleteMode}\n//                     >\n//                         {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\n//                     </button>\n//                 </div>\n//             </GoogleMap>\n//         </LoadScript>\n//     );\n// }\n//\n// export default MyGoogleMap;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoWindow, Circle } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '90vh'\n};\nconst center = {\n  lat: 30.046981762780838,\n  lng: 31.237174094852456\n};\nfunction MyGoogleMap() {\n  _s();\n  const token = localStorage.getItem('authToken');\n  const userId = localStorage.getItem('userId');\n  const [markers, setMarkers] = useState([]);\n  const [activeMarker, setActiveMarker] = useState(null);\n  const [isAddingBookmark, setIsAddingBookmark] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\n  const [selectedPlace1, setSelectedPlace1] = useState(null);\n  const [selectedPlace2, setSelectedPlace2] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const fetchBookmarks = useCallback(() => {\n    fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      if (data.status.statusCode === 200) {\n        const userBookmarks = data.data.map(bookmark => ({\n          lat: bookmark.coordinates.latitude,\n          lng: bookmark.coordinates.longitude,\n          name: bookmark.name,\n          description: bookmark.description,\n          bookmarkId: bookmark._id\n        }));\n        setMarkers(userBookmarks);\n      }\n    }).catch(error => {\n      console.error('Error fetching user data:', error);\n    });\n  }, [userId, token]);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lng = position.coords.longitude;\n        const currentLocationMarker = {\n          lat,\n          lng,\n          name: 'Current Location',\n          description: 'You are here'\n        };\n        setMarkers([currentLocationMarker]);\n      });\n    }\n    fetchBookmarks();\n  }, [userId, token]);\n  const toggleBookmarkMode = () => {\n    setIsAddingBookmark(!isAddingBookmark);\n    setSelectedMarkerForDeletion(null);\n    setIsDeleteMode(false);\n  };\n  const toggleDeleteMode = () => {\n    setIsDeleteMode(!isDeleteMode);\n    setSelectedMarkerForDeletion(null);\n  };\n  const handleMapClick = event => {\n    if (isAddingBookmark) {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      const newMarker = {\n        lat,\n        lng,\n        name: '',\n        description: ''\n      };\n      if (!selectedPlace1) {\n        setSelectedPlace1(newMarker);\n      } else if (!selectedPlace2) {\n        setSelectedPlace2(newMarker);\n        calculateDistance(selectedPlace1, newMarker);\n      }\n    }\n  };\n  const handleMarkerClick = marker => {\n    if (isDeleteMode) {\n      setSelectedMarkerForDeletion(marker);\n    } else {\n      setActiveMarker(marker);\n    }\n  };\n  const deleteSelectedMarker = async () => {\n    if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\n      const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\n      try {\n        const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: token\n          },\n          body: JSON.stringify({\n            bookmarkId\n          })\n        });\n        if (response.status === 204) {\n          setMarkers(markers.filter(marker => marker !== selectedMarkerForDeletion));\n          setSelectedMarkerForDeletion(null);\n          const closeButton = document.querySelector('.gm-ui-hover-effect');\n          if (closeButton) {\n            closeButton.click();\n          }\n        } else {\n          console.error('Error deleting bookmark');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleNameChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      name: event.target.value\n    });\n  };\n  const handleDescriptionChange = event => {\n    setActiveMarker({\n      ...activeMarker,\n      description: event.target.value\n    });\n  };\n  const saveBookmark = async () => {\n    if (!activeMarker || !activeMarker.name) {\n      return;\n    }\n    const bookmarkToSend = {\n      userId,\n      name: activeMarker.name,\n      coordinates: {\n        latitude: activeMarker.lat,\n        longitude: activeMarker.lng\n      },\n      description: activeMarker.description\n    };\n    try {\n      const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify(bookmarkToSend)\n      });\n      if (response.status === 201) {\n        setMarkers([...markers, {\n          ...bookmarkToSend,\n          bookmarkId: response.data.bookmarkId\n        }]);\n        setActiveMarker(null);\n        setIsAddingBookmark(false);\n      } else {\n        console.error('Error creating bookmark');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const calculateDistance = (place1, place2) => {\n    const radius = 6371;\n    const lat1 = place1.lat;\n    const lon1 = place1.lng;\n    const lat2 = place2.lat;\n    const lon2 = place2.lng;\n    const dLat = toRadians(lat2 - lat1);\n    const dLon = toRadians(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = radius * c;\n    setDistance(distance.toFixed(2));\n  };\n  const toRadians = degrees => {\n    return degrees * Math.PI / 180;\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 14,\n      onClick: handleMapClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 450,\n    columnNumber: 9\n  }, this);\n}\n_s(MyGoogleMap, \"D8fUUUX36/YRyniUgtB/ppWmS3w=\");\n_c = MyGoogleMap;\nexport default MyGoogleMap;\nvar _c;\n$RefreshReg$(_c, \"MyGoogleMap\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","LoadScript","Marker","InfoWindow","Circle","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MyGoogleMap","_s","token","localStorage","getItem","userId","markers","setMarkers","activeMarker","setActiveMarker","isAddingBookmark","setIsAddingBookmark","isDeleteMode","setIsDeleteMode","selectedMarkerForDeletion","setSelectedMarkerForDeletion","selectedPlace1","setSelectedPlace1","selectedPlace2","setSelectedPlace2","distance","setDistance","fetchBookmarks","fetch","method","headers","then","response","json","data","status","statusCode","userBookmarks","map","bookmark","coordinates","latitude","longitude","name","description","bookmarkId","_id","catch","error","console","navigator","geolocation","getCurrentPosition","position","coords","currentLocationMarker","toggleBookmarkMode","toggleDeleteMode","handleMapClick","event","latLng","newMarker","calculateDistance","handleMarkerClick","marker","deleteSelectedMarker","Authorization","body","JSON","stringify","filter","closeButton","document","querySelector","click","handleNameChange","target","value","handleDescriptionChange","saveBookmark","bookmarkToSend","place1","place2","radius","lat1","lon1","lat2","lon2","dLat","toRadians","dLon","a","Math","sin","cos","c","atan2","sqrt","toFixed","degrees","PI","googleMapsApiKey","children","mapContainerStyle","zoom","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Projects/NodeJSProjects/map-mark-ui/src/components/GoogleMap.js"],"sourcesContent":["// // export default MyGoogleMap;\r\n// import React, {useState, useEffect, useCallback} from 'react';\r\n// import {GoogleMap, LoadScript, Marker, InfoWindow, Circle} from '@react-google-maps/api';\r\n// import '../styles/components/GoogleMapStyle.css';\r\n//\r\n// const containerStyle = {\r\n//     width: '100%',\r\n//     height: '90vh',\r\n// };\r\n//\r\n// const center = {\r\n//     lat: 30.046981762780838,\r\n//     lng: 31.237174094852456,\r\n// };\r\n//\r\n// function MyGoogleMap() {\r\n//     const token = localStorage.getItem('authToken');\r\n//     const userId = localStorage.getItem('userId');\r\n//     const [markers, setMarkers] = useState([]);\r\n//     const [activeMarker, setActiveMarker] = useState(null);\r\n//     const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n//     const [isDeleteMode, setIsDeleteMode] = useState(false);\r\n//     const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\r\n//\r\n//     const fetchBookmarks = useCallback(() => {\r\n//         fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n//             method: 'GET',\r\n//             headers: {\r\n//                 'Authorization': `${token}`,\r\n//             },\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((data) => {\r\n//                 if (data.status.statusCode === 200) {\r\n//                     const userBookmarks = data.data.map((bookmark) => ({\r\n//                         lat: bookmark.coordinates.latitude,\r\n//                         lng: bookmark.coordinates.longitude,\r\n//                         name: bookmark.name,\r\n//                         description: bookmark.description,\r\n//                         bookmarkId: bookmark._id,\r\n//                     }));\r\n//                     setMarkers(userBookmarks); // Set markers from the database\r\n//                     console.log(\"This I my Data: \", userBookmarks);\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.error('Error fetching user data:', error);\r\n//             });\r\n//     }, [userId, token]);\r\n//\r\n//     useEffect(() => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition((position) => {\r\n//                 const lat = position.coords.latitude;\r\n//                 const lng = position.coords.longitude;\r\n//                 const currentLocationMarker = {lat, lng, name: 'Current Location', description: 'You are here'};\r\n//                 setMarkers([currentLocationMarker]);\r\n//             });\r\n//         }\r\n//\r\n//         fetchBookmarks();\r\n//     }, [userId, token]);\r\n//\r\n//     const toggleBookmarkMode = () => {\r\n//         setIsAddingBookmark(!isAddingBookmark);\r\n//         setSelectedMarkerForDeletion(null);\r\n//         setIsDeleteMode(false); // Turn off Delete Mode when switching to Add Mode\r\n//     };\r\n//\r\n//     const toggleDeleteMode = () => {\r\n//         setIsDeleteMode(!isDeleteMode);\r\n//         setSelectedMarkerForDeletion(null); // Clear selected marker when entering Delete Mode\r\n//     };\r\n//\r\n//     const handleMapClick = (event) => {\r\n//         if (isAddingBookmark) {\r\n//             const lat = event.latLng.lat();\r\n//             const lng = event.latLng.lng();\r\n//             const newMarker = {lat, lng, name: '', description: ''};\r\n//             setMarkers([...markers, newMarker]);\r\n//         }\r\n//     };\r\n//\r\n//     const handleMarkerClick = (marker) => {\r\n//         if (isDeleteMode) {\r\n//             setSelectedMarkerForDeletion(marker); // Select marker for deletion\r\n//         } else {\r\n//             setActiveMarker(marker);\r\n//         }\r\n//     };\r\n//\r\n//     const deleteSelectedMarker = async () => {\r\n//         if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\r\n//             const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\r\n//             console.log('Bookmark ID:', bookmarkId);\r\n//\r\n//             try {\r\n//                 const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\r\n//                     method: 'DELETE',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                         Authorization: token,\r\n//                     },\r\n//                     body: JSON.stringify({bookmarkId}), // Send the bookmarkId in the request body\r\n//                 });\r\n//\r\n//                 if (response.status === 204) {\r\n//                     console.log('Bookmark deleted successfully');\r\n//                     setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\r\n//                     setSelectedMarkerForDeletion(null);\r\n//\r\n//                     // Close the InfoWindow programmatically\r\n//                     const closeButton = document.querySelector('.gm-ui-hover-effect'); // This class may vary depending on your Google Maps version\r\n//                     if (closeButton) {\r\n//                         closeButton.click();\r\n//                     }\r\n//                 } else {\r\n//                     console.error('Error deleting bookmark');\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Error:', error);\r\n//             }\r\n//         }\r\n//     };\r\n//\r\n//     const handleNameChange = (event) => {\r\n//         setActiveMarker({...activeMarker, name: event.target.value});\r\n//     };\r\n//\r\n//     const handleDescriptionChange = (event) => {\r\n//         setActiveMarker({...activeMarker, description: event.target.value});\r\n//     };\r\n//\r\n//     const saveBookmark = async () => {\r\n//         if (!activeMarker || !activeMarker.name) {\r\n//             return;\r\n//         }\r\n//\r\n//         const bookmarkToSend = {\r\n//             userId,\r\n//             name: activeMarker.name,\r\n//             coordinates: {latitude: activeMarker.lat, longitude: activeMarker.lng},\r\n//             description: activeMarker.description,\r\n//         };\r\n//\r\n//         try {\r\n//             const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     Authorization: token,\r\n//                 },\r\n//                 body: JSON.stringify(bookmarkToSend),\r\n//             });\r\n//\r\n//             if (response.status === 201) {\r\n//                 console.log('Bookmark created successfully');\r\n//                 setMarkers([...markers, {...bookmarkToSend, bookmarkId: response.data.bookmarkId}]);\r\n//                 setActiveMarker(null);\r\n//                 setIsAddingBookmark(false);\r\n//             } else {\r\n//                 console.error('Error creating bookmark');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n//             <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n//                 {markers.map((marker, index) => (\r\n//                     <React.Fragment key={index}>\r\n//                         <Marker\r\n//                             position={{lat: marker.lat, lng: marker.lng}}\r\n//                             onClick={() => handleMarkerClick(marker)}\r\n//                         />\r\n//                         <Circle\r\n//                             center={{lat: marker.lat, lng: marker.lng}}\r\n//                             radius={1000} // Adjust the radius as needed\r\n//                             options={{\r\n//                                 fillColor: 'rgba(0, 0, 255, 0.2)', // Circle fill color\r\n//                                 strokeColor: 'blue', // Circle border color\r\n//                                 strokeOpacity: 0.8,\r\n//                                 strokeWeight: 2,\r\n//                             }}\r\n//                         />\r\n//                     </React.Fragment>\r\n//                 ))}\r\n//\r\n//                 {activeMarker && (\r\n//                     <InfoWindow\r\n//                         position={{lat: activeMarker.lat, lng: activeMarker.lng}}\r\n//                         onCloseClick={() => setActiveMarker(null)}\r\n//                     >\r\n//                         <div className=\"info-window-content\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Bookmark Name\"\r\n//                                 value={activeMarker.name}\r\n//                                 onChange={handleNameChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <textarea\r\n//                                 placeholder=\"Bookmark Description\"\r\n//                                 value={activeMarker.description}\r\n//                                 onChange={handleDescriptionChange}\r\n//                                 className=\"input-field\"\r\n//                             />\r\n//                             <button className=\"save-button\" onClick={saveBookmark}>\r\n//                                 Save Bookmark\r\n//                             </button>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 {selectedMarkerForDeletion && (\r\n//                     <InfoWindow\r\n//                         position={{lat: selectedMarkerForDeletion.lat, lng: selectedMarkerForDeletion.lng}}\r\n//                         onCloseClick={() => setSelectedMarkerForDeletion(null)}\r\n//                     >\r\n//                         <div className=\"info-window-container\">\r\n//                             <div className=\"info-window-content\">\r\n//                                 <p>Do you want to delete this bookmark?</p>\r\n//                                 <div className=\"button-container\">\r\n//                                     <button className=\"button\" onClick={deleteSelectedMarker}>Yes, Delete</button>\r\n//                                     <button className=\"button\"\r\n//                                             onClick={() => setSelectedMarkerForDeletion(null)}>Cancel\r\n//                                     </button>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                     </InfoWindow>\r\n//                 )}\r\n//\r\n//                 <div className=\"buttons-container\">\r\n//                     <button\r\n//                         className={`add-bookmark-button ${isAddingBookmark ? 'adding' : ''}`}\r\n//                         onClick={toggleBookmarkMode}\r\n//                     >\r\n//                         {isAddingBookmark ? 'Cancel Bookmark' : 'Add Bookmark'}\r\n//                     </button>\r\n//                     <button\r\n//                         className={`delete-bookmark-button ${isDeleteMode ? 'deleting' : ''}`}\r\n//                         onClick={toggleDeleteMode}\r\n//                     >\r\n//                         {isDeleteMode ? 'Cancel Delete' : 'Delete Bookmark'}\r\n//                     </button>\r\n//                 </div>\r\n//             </GoogleMap>\r\n//         </LoadScript>\r\n//     );\r\n// }\r\n//\r\n// export default MyGoogleMap;\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { GoogleMap, LoadScript, Marker, InfoWindow, Circle } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '90vh',\r\n};\r\n\r\nconst center = {\r\n    lat: 30.046981762780838,\r\n    lng: 31.237174094852456,\r\n};\r\n\r\nfunction MyGoogleMap() {\r\n    const token = localStorage.getItem('authToken');\r\n    const userId = localStorage.getItem('userId');\r\n    const [markers, setMarkers] = useState([]);\r\n    const [activeMarker, setActiveMarker] = useState(null);\r\n    const [isAddingBookmark, setIsAddingBookmark] = useState(false);\r\n    const [isDeleteMode, setIsDeleteMode] = useState(false);\r\n    const [selectedMarkerForDeletion, setSelectedMarkerForDeletion] = useState(null);\r\n    const [selectedPlace1, setSelectedPlace1] = useState(null);\r\n    const [selectedPlace2, setSelectedPlace2] = useState(null);\r\n    const [distance, setDistance] = useState(null);\r\n\r\n    const fetchBookmarks = useCallback(() => {\r\n        fetch(`http://localhost:3000/api/auth/bookmarks/${userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `${token}`,\r\n            },\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                if (data.status.statusCode === 200) {\r\n                    const userBookmarks = data.data.map((bookmark) => ({\r\n                        lat: bookmark.coordinates.latitude,\r\n                        lng: bookmark.coordinates.longitude,\r\n                        name: bookmark.name,\r\n                        description: bookmark.description,\r\n                        bookmarkId: bookmark._id,\r\n                    }));\r\n                    setMarkers(userBookmarks);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching user data:', error);\r\n            });\r\n    }, [userId, token]);\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lng = position.coords.longitude;\r\n                const currentLocationMarker = { lat, lng, name: 'Current Location', description: 'You are here' };\r\n                setMarkers([currentLocationMarker]);\r\n            });\r\n        }\r\n\r\n        fetchBookmarks();\r\n    }, [userId, token]);\r\n\r\n    const toggleBookmarkMode = () => {\r\n        setIsAddingBookmark(!isAddingBookmark);\r\n        setSelectedMarkerForDeletion(null);\r\n        setIsDeleteMode(false);\r\n    };\r\n\r\n    const toggleDeleteMode = () => {\r\n        setIsDeleteMode(!isDeleteMode);\r\n        setSelectedMarkerForDeletion(null);\r\n    };\r\n\r\n    const handleMapClick = (event) => {\r\n        if (isAddingBookmark) {\r\n            const lat = event.latLng.lat();\r\n            const lng = event.latLng.lng();\r\n            const newMarker = { lat, lng, name: '', description: '' };\r\n\r\n            if (!selectedPlace1) {\r\n                setSelectedPlace1(newMarker);\r\n            } else if (!selectedPlace2) {\r\n                setSelectedPlace2(newMarker);\r\n                calculateDistance(selectedPlace1, newMarker);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleMarkerClick = (marker) => {\r\n        if (isDeleteMode) {\r\n            setSelectedMarkerForDeletion(marker);\r\n        } else {\r\n            setActiveMarker(marker);\r\n        }\r\n    };\r\n\r\n    const deleteSelectedMarker = async () => {\r\n        if (selectedMarkerForDeletion && selectedMarkerForDeletion.bookmarkId) {\r\n            const bookmarkId = selectedMarkerForDeletion['bookmarkId'];\r\n\r\n            try {\r\n                const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/${bookmarkId}/delete`, {\r\n                    method: 'DELETE',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: token,\r\n                    },\r\n                    body: JSON.stringify({ bookmarkId }),\r\n                });\r\n\r\n                if (response.status === 204) {\r\n                    setMarkers(markers.filter((marker) => marker !== selectedMarkerForDeletion));\r\n                    setSelectedMarkerForDeletion(null);\r\n\r\n                    const closeButton = document.querySelector('.gm-ui-hover-effect');\r\n                    if (closeButton) {\r\n                        closeButton.click();\r\n                    }\r\n                } else {\r\n                    console.error('Error deleting bookmark');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleNameChange = (event) => {\r\n        setActiveMarker({ ...activeMarker, name: event.target.value });\r\n    };\r\n\r\n    const handleDescriptionChange = (event) => {\r\n        setActiveMarker({ ...activeMarker, description: event.target.value });\r\n    };\r\n\r\n    const saveBookmark = async () => {\r\n        if (!activeMarker || !activeMarker.name) {\r\n            return;\r\n        }\r\n\r\n        const bookmarkToSend = {\r\n            userId,\r\n            name: activeMarker.name,\r\n            coordinates: { latitude: activeMarker.lat, longitude: activeMarker.lng },\r\n            description: activeMarker.description,\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/auth/bookmarks/${userId}/add`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: token,\r\n                },\r\n                body: JSON.stringify(bookmarkToSend),\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                setMarkers([...markers, { ...bookmarkToSend, bookmarkId: response.data.bookmarkId }]);\r\n                setActiveMarker(null);\r\n                setIsAddingBookmark(false);\r\n            } else {\r\n                console.error('Error creating bookmark');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    const calculateDistance = (place1, place2) => {\r\n        const radius = 6371;\r\n        const lat1 = place1.lat;\r\n        const lon1 = place1.lng;\r\n        const lat2 = place2.lat;\r\n        const lon2 = place2.lng;\r\n\r\n        const dLat = toRadians(lat2 - lat1);\r\n        const dLon = toRadians(lon2 - lon1);\r\n\r\n        const a =\r\n            Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n            Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        const distance = radius * c;\r\n        setDistance(distance.toFixed(2));\r\n    };\r\n\r\n    const toRadians = (degrees) => {\r\n        return (degrees * Math.PI) / 180;\r\n    };\r\n\r\n    return (\r\n        <LoadScript googleMapsApiKey=\"AIzaSyC3phyjN4feKgzWWAVQOURiVIkvYlSMWLg\">\r\n            <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={14} onClick={handleMapClick}>\r\n                {/* Render markers and other components */}\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n}\r\n\r\nexport default MyGoogleMap;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}